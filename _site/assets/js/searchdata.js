
var jsondata=[
  
  ,
  
   {
     
     
        "title"    : "404.html",
        "category" : "",
        "tags"     : "",
        "url"      : "/404.html",
        "date"     : "",
        "content"  : "<!--- this file is needed for automatic creation of non existent pages --->\n"
     
   } ,
  
   {
     
     
        "title"    : "Arch Linux",
        "category" : "",
        "tags"     : "",
        "url"      : "/archlinux",
        "date"     : "",
        "content"  : "<h1 id=\"arch-linux\">Arch Linux</h1>\n\n<p>Arch Linux is a <em>rolling-release</em> distribution, i.e. <em>packages</em> (software) receive updates constantly. There is not a concensus on how often one needs to update their system, a good rule of thumb is once per week.</p>\n\n<blockquote class=\"tip\">\n  <p>If case something happens, <strong>always</strong> check the <a href=\"https://wiki.archlinux.org/title/Main_page\">Arch Wiki</a> first. It always help, no matter the problem you may have. Read <strong>very</strong> carefully the instructions, and don’t skip steps. I have encountered many problems for literally not reading the next line in the wiki.</p>\n</blockquote>\n\n<p>This guide serves as both a beginner guide to know that to check after they install Arch Linux for the first time, but also a checklist for myself to remember what to look for in a new installation. I will assume that you installed KDE Plasma as your Desktop Environment.</p>\n\n<h2 id=\"the-package-manager\">The package Manager</h2>\n\n<p>As in any Linux distribution, Arch Linux has a <em>package manager</em> called <code class=\"language-plaintext highlighter-rouge\">pacman</code> that installs software from the <em>Arch repository</em> . Package names may differ from other distributions, so it is recommended that you check on the <a href=\"https://archlinux.org/packages/\">repositories</a> or the <a href=\"https://wiki.archlinux.org/title/Main_page\">Arch Wiki</a> how to install particular software.</p>\n\n<p>To install packages simply run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> PACKAGE_NAME\n</code></pre></div></div>\n\n<p>where the <code class=\"language-plaintext highlighter-rouge\">-S</code> flag stands for <em>Sync</em>. It basically reads</p>\n\n<blockquote>\n  <p>Sync from the pacman (Arch) repository PACKAGE_NAME with my system</p>\n</blockquote>\n\n<h2 id=\"the-arch-user-repository\">The Arch User Repository</h2>\n\n<p>Not every piece of software can be found in the regular Arch repositories. Take for example <code class=\"language-plaintext highlighter-rouge\">dropbox</code>, that has official support for Debian/Ubuntu, but not for Arch Linux. Another example would be software that need to be <em>compiled from source</em> like <code class=\"language-plaintext highlighter-rouge\">lammps</code>, <code class=\"language-plaintext highlighter-rouge\">gromacs</code> or some of the <code class=\"language-plaintext highlighter-rouge\">xp-pen</code> drivers for their tablets. Manually repackaging, or compiling from source will install the software on your system at the cost of not being properly managed by <code class=\"language-plaintext highlighter-rouge\">pacman</code>. On such cases we turn to the so-called <em>Arch User Repository</em> (AUR).</p>\n\n<p>The Arch User Repository (AUR) is a community-driven repository for Arch Linux that allows users to share and install packages not available in the official Arch repositories. Unlike the official repos, which provide precompiled binaries, the AUR contains <em>PKGBUILD</em> scripts—text files that define how to download, compile, and install software from source or external sources like .deb packages. Users can manually download a PKGBUILD and run <code class=\"language-plaintext highlighter-rouge\">makepkg -si</code> to build and install the package, or use an <em>AUR helper</em> like <code class=\"language-plaintext highlighter-rouge\">yay</code> or <code class=\"language-plaintext highlighter-rouge\">paru</code> to automate the process. Since AUR packages are maintained by the community, they are not officially supported by Arch and may require user intervention if dependencies or builds break.</p>\n\n<p>To install <code class=\"language-plaintext highlighter-rouge\">yay</code> as an AUR helper, run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> <span class=\"nt\">--needed</span> base-devel git\n<span class=\"nb\">mkdir</span> /tmp/yay\ngit clone https://aur.archlinux.org/yay.git /tmp/yay\n<span class=\"nb\">cd</span> /tmp/yay\nmakepkg <span class=\"nt\">-si</span>\n</code></pre></div></div>\n\n<p>Then from the AUR, we can install with same flags as in <code class=\"language-plaintext highlighter-rouge\">pacman</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> PACKAGE_NAME\n</code></pre></div></div>\n\n<p>When yay installs an AUR package, it first downloads the <em>PKGBUILD</em> script, builds the package into a <code class=\"language-plaintext highlighter-rouge\">.pkg.tar.zst</code> file, and then installs it using <code class=\"language-plaintext highlighter-rouge\">pacman -U</code>. Since pacman tracks all installed packages in its local database (/var/lib/pacman/), the AUR package becomes indistinguishable from an official package in terms of management. This means <code class=\"language-plaintext highlighter-rouge\">pacman -Q</code> can list it, <code class=\"language-plaintext highlighter-rouge\">pacman -R</code> can remove it, and <code class=\"language-plaintext highlighter-rouge\">pacman -U</code> can reinstall it.</p>\n\n<p>Because AUR packages are not in the official repositories, <code class=\"language-plaintext highlighter-rouge\">pacman -Syu</code> does not update them—users must manually rebuild them or use an AUR helper like <code class=\"language-plaintext highlighter-rouge\">yay -Syu</code>, which automates the update process by fetching new <em>PKGBUILD</em> versions and repeating the build-and-install process.</p>\n\n<h2 id=\"full-system-upgrade\">Full System Upgrade</h2>\n\n<p>Arch Linux receives constant updates, to make a <em>full system upgrade</em> run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-Syu</span>\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p>Always make sure to read what packages are being updated.</p>\n</blockquote>\n\n<h1 id=\"system-sanity-check\">System Sanity Check</h1>\n\n<p>First thing, is that we need to check if all basic functionalities are working properly. In some sections I don’t have any particular advice, as they usually work out of the box. In such cases, I will simply provide a link to their ArchWiki page.</p>\n\n<h2 id=\"network\">Network</h2>\n\n<ul>\n  <li><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Network_configuration/Wireless\">Network configuration</a> on the ArchWiki.</li>\n</ul>\n\n<h3 id=\"migrating-wpa_supplicant-to-iwd\">Migrating <code class=\"language-plaintext highlighter-rouge\">wpa_supplicant</code> to <code class=\"language-plaintext highlighter-rouge\">iwd</code></h3>\n<p>See <a href=\"linux.dump#migrating-wpa_supplicant-to-iwd\">Migrating wpa_supplicant to iwd</a></p>\n\n<h2 id=\"sound\">Sound</h2>\n\n<ul>\n  <li>\n    <p><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Sound_system\">Sound system</a> on the ArchWiki.</p>\n  </li>\n  <li>\n    <p><strong>Microphone is not detected on some Lenovo Laptops</strong></p>\n\n    <p>On some Lenovo laptops, e.g. ThinkPad T14 Gen 2, the built-in microphone was not properly detected.</p>\n\n    <p>A solution was found in <a href=\"https://www.reddit.com/r/archlinux/comments/13hca34/microphone_is_not_detected/?share_id=ex0_FTMc98thXfpI1To3q&amp;utm_content=2&amp;utm_medium=android_app&amp;utm_name=androidcss&amp;utm_source=share&amp;utm_term=3\">this Reddit post</a> by user <code class=\"language-plaintext highlighter-rouge\">4bjmc881</code>, who identified that the issue was related to the audio driver being loaded by the system. By default, the system attempts to use the <code class=\"language-plaintext highlighter-rouge\">snd-hda-intel</code> driver. However, for newer devices (from 2019 onwards), the <code class=\"language-plaintext highlighter-rouge\">sof-audio-pci-intel-cnl</code> driver is more appropriate. To ensure that the correct driver is loaded, the <code class=\"language-plaintext highlighter-rouge\">snd-hda-intel</code> driver must be blacklisted.\\</p>\n\n    <p>To solve the issue, create or edit the modprobe config at <code class=\"language-plaintext highlighter-rouge\">/etc/modprobe.d/blacklist.conf</code> and add the following content</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>blacklist snd_hda_intel\n</code></pre></div>    </div>\n\n    <p>After reboot, the kernel loads the driver and the microphone is detected correctly.</p>\n  </li>\n</ul>\n\n<h2 id=\"bluetooth\">Bluetooth</h2>\n\n<ul>\n  <li>\n    <p><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Bluetooth_headset\">Bluetooth headset</a> on the ArchWiki.</p>\n  </li>\n  <li>\n    <p><strong>General bluetooth capabilities</strong></p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> bluez bluez-utils bluez-deprecated-tools\n</code></pre></div>    </div>\n\n    <p>Typically the Bluetooth Services is not enabled by default.</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl start bluetooth.service\n<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>bluetooth.service\n</code></pre></div>    </div>\n\n    <p>Sometimes you will need to reboot your PC for everything to work properly.</p>\n  </li>\n</ul>\n\n<h2 id=\"keyboard-backlight\">Keyboard Backlight</h2>\n\n<ul>\n  <li>\n    <p><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Keyboard_backlight\">Keyboard backlight</a> on the Archwiki.</p>\n  </li>\n  <li>\n    <p><strong>The frontend that controls the backlight is not installed</strong></p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> brightnessctl\n</code></pre></div>    </div>\n\n    <p>If that does not solve it, check the Archwiki.</p>\n  </li>\n</ul>\n\n<h2 id=\"screenshots\">Screenshots</h2>\n\n<ul>\n  <li>\n    <p><strong>The software that takes screenshots is not installed</strong></p>\n\n    <p>For KDE Plasma use <code class=\"language-plaintext highlighter-rouge\">spectacle</code>.</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> spectacle\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"monitors\">Monitors</h2>\n\n<p>In particular, check that</p>\n\n<ol>\n  <li>All monitors connect correctly, in particular those that use Thunderbolt/USB4.</li>\n  <li>All monitors run at their respective refresh rate.</li>\n</ol>\n\n<h2 id=\"graphics-card\">Graphics Card</h2>\n\n<p>There are a few ways to make sure your dedicated graphics card is working.</p>\n\n<blockquote class=\"warning\">\n  <p>For <strong>NVIDIA graphics cards</strong>,  <strong>do not forget</strong> to remove <code class=\"language-plaintext highlighter-rouge\">kms</code> from the <code class=\"language-plaintext highlighter-rouge\">HOOKS</code> array in <code class=\"language-plaintext highlighter-rouge\">/etc/mkinitcpio.conf</code>. Check the <a href=\"https://wiki.archlinux.org/title/NVIDIA\">NVIDIA Arch Wiki Page</a> for more information.</p>\n</blockquote>\n\n<ul>\n  <li>\n    <p><strong>Card Is Detected</strong></p>\n\n    <ol>\n      <li>In KDE Plasma, look for the <em>About</em> setting, it should list all of your components.</li>\n      <li>Using fastfetch</li>\n    </ol>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> fastfetch\nfastfech\n</code></pre></div>    </div>\n\n    <ol>\n      <li>Using <code class=\"language-plaintext highlighter-rouge\">lspci</code></li>\n    </ol>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lspci | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> vga\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>OpenGL Renderer</strong></p>\n\n    <p>You can check the default OpenGL rendered for your system to make sure which card is currently being used</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>glxinfo | <span class=\"nb\">grep</span> <span class=\"s2\">\"OpenGL renderer\"</span>\n<span class=\"c\"># OpenGL renderer string: AMD Radeon RX 6650M (radeonsi, navi23, LLVM 19.1.6, DRM 3.59, 6.12.9-arch1-1)</span>\n</code></pre></div>    </div>\n\n    <p>This will list the current renderer and used driver. If it is not the correct one, you can force it with the <code class=\"language-plaintext highlighter-rouge\">DRI_PRIME</code> environment variable.</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">DRI_PRIME</span><span class=\"o\">=</span>1 glxinfo | <span class=\"nb\">grep</span> <span class=\"s2\">\"OpenGL renderer\"</span>\n<span class=\"c\"># OpenGL renderer string: AMD Radeon 780M (radeonsi, gfx1103_r1, LLVM 19.1.6, DRM 3.59, 6.12.9-arch1-1)</span>\n</code></pre></div>    </div>\n\n    <p>As a final sanity check, a good way to <em>really</em> make sure your card is working is by launching minecraft. You can install it from the AUR</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> minecraft-launcher\n</code></pre></div>    </div>\n\n    <p>In a world, press F3 and check the <em>display</em> information on the right side. If you see the incorrect graphics card, change Plasma to use the other one as default, or force the application launcher to use the correct <code class=\"language-plaintext highlighter-rouge\">DRI_PRIME</code> variable state. I am not sure on how this is configured, typically after a few restards, Plasma always decides to use the dedicated graphics.</p>\n  </li>\n</ul>\n\n<h2 id=\"fonts\">Fonts</h2>\n\n<p>You will note that some characters (chinese, japanese or korean) will not render correctly in your browser. Install the Google Noto CJK fonts</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> noto-fonts-cjk\n</code></pre></div></div>\n<p>and reset your browser.</p>\n\n<h1 id=\"text-editor\">Text Editor</h1>\n\n<h2 id=\"vscode\">VSCode</h2>\n\n<p>There are many text editors on Linux. VSCode is a Microsoft editor with enabled telemetry, Linux users do not like that for privacy concerns. VSCodium is a community open-source release that nullifies telemetry, and is available in the AUR. For Arch Linux, there is an official OSS release</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> code\n</code></pre></div></div>\n\n<p>For more information, read the <a href=\"https://wiki.archlinux.org/title/Visual_Studio_Code\">VSCode Arch Wiki Page</a>.</p>\n\n<h2 id=\"neovim\">Neovim</h2>\n\n<p>I personally use <code class=\"language-plaintext highlighter-rouge\">nvim</code> with my own configuration.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> nvim\ngit clone https://github.com/leogabac/leovim.git ~/.config/nvim\nnvim\n</code></pre></div></div>\n\n<p>Check the <a href=\"https://github.com/leogabac/leovim\">leovim repository</a> for more information.</p>\n\n<h1 id=\"common-and-useful-utilities\">Common (and useful) utilities</h1>\n\n<h2 id=\"general-terminal-utilities\">General Terminal Utilities</h2>\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">btop</code>. A terminal system monitor tool.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">nvtop</code>. A terminal GPU monitoring tool for NVIDIA and AMD cards.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">zoxide</code>. Quick file navigation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">fzf</code>. A general fuzzy finder picker.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">yazi</code>. A file explorer in the terminal.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">lsd</code>. A <code class=\"language-plaintext highlighter-rouge\">ls</code> replacement.</li>\n</ol>\n\n<h2 id=\"terminal-emulators\">Terminal Emulators</h2>\n\n<ol>\n  <li><a href=\"https://sw.kovidgoyal.net/kitty/\">Kitty</a>. A modern, fast, GPU-based terminal emulator. The kitty graphics protocol works the best under kitty.</li>\n  <li><a href=\"https://wezterm.org/index.html\">WezTerm</a>. A powerful cross-platform terminal emulator and multiplexer. Written in rust.</li>\n  <li><a href=\"https://ghostty.org/\">Ghostty</a>. A fast, feature-rich, and cross-platform terminal emulator with GPU accelerator.</li>\n</ol>\n\n<h2 id=\"networking-management\">Networking Management.</h2>\n\n<ol>\n  <li><a href=\"https://headscale.net/stable/\">Headscale</a> is an open-source, self-hosted implementation of the <a href=\"https://tailscale.com/\">tailscale</a> service, providing a secure, encrypted network for connecting devices over the internet.</li>\n  <li><a href=\"https://www.zerotier.com/\">ZeroTier</a>. Networking (SDN) platform that allows the cration of global private networks between machines. It uses the proprietary ZeroTier protocol.</li>\n</ol>\n\n<h1 id=\"see-also\">See also</h1>\n\n<p>There are other tools you might be interested in checking out. Here are some of them (Available on this Wiki)</p>\n\n<ul>\n  <li><a href=\"linux.settings\">Linux: Settings</a>: A list of common settings for Linux.</li>\n  <li><a href=\"python\">Python</a>: Installation, virtual environments, handling versions.</li>\n  <li><a href=\"timeshift\">Timeshift</a>: Tool for creating system snapshopts. Similar to MacOS TimeMachine.</li>\n  <li><a href=\"latex\">LaTeX</a>: Typesetting system.</li>\n</ul>\n"
     
   } ,
  
   {
     
     
        "title"    : "C++: Armadillo",
        "category" : "",
        "tags"     : "",
        "url"      : "/cpp.armadillo",
        "date"     : "",
        "content"  : "<h1 id=\"c-armadillo\">C++: Armadillo</h1>\n\n<blockquote class=\"wip\">\n  <p>WIP</p>\n</blockquote>\n"
     
   } ,
  
   {
     
     
        "title"    : "C++: Fast Fourier Transform",
        "category" : "",
        "tags"     : "",
        "url"      : "/cpp.fft",
        "date"     : "",
        "content"  : "<h1 id=\"c-fast-fourier-transform\">C++: Fast Fourier Transform</h1>\n\n<p>The fastest Fourier Transform in the West.</p>\n\n<h2 id=\"installation\">Installation</h2>\n<p>Install the <em>FFTW</em> library, on Arch Linux</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> fftw\n</code></pre></div></div>\n<p>By installing this, we have access to the header:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fftw3.h&gt;</span><span class=\"cp\">\n</span></code></pre></div></div>\n\n<h2 id=\"quick-start\">Quick Start</h2>\n\n<h3 id=\"computing-the-fft\">Computing the FFT</h3>\n<p>Here is an example of a function that computes the Fourier Transform on a complex vector, and returns a complex vector:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;complex&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;fftw3.h&gt;</span><span class=\"cp\">\n</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">complex</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">compute_fft</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">complex</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">input</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">complex</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">);</span>\n\n    <span class=\"n\">fftw_plan</span> <span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">fftw_plan_dft_1d</span><span class=\"p\">(</span>\n            <span class=\"n\">N</span><span class=\"p\">,</span>\n            <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"n\">fftw_complex</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()),</span>\n            <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"n\">fftw_complex</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()),</span>\n            <span class=\"n\">FFTW_FORWARD</span><span class=\"p\">,</span>\n            <span class=\"n\">FFTW_ESTIMATE</span>\n    <span class=\"p\">);</span>\n\n    <span class=\"n\">fftw_execute</span><span class=\"p\">(</span><span class=\"n\">plan</span><span class=\"p\">);</span>\n    <span class=\"n\">fftw_destroy_plan</span><span class=\"p\">(</span><span class=\"n\">plan</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">output</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"compilation\">Compilation</h3>\n<p>Compile your file by linking the FFTW library:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c++ main.cpp <span class=\"nt\">-o</span> main.out <span class=\"nt\">-lfftw3</span> <span class=\"nt\">-lm</span>\n</code></pre></div></div>\n\n<h3 id=\"visualization\">Visualization</h3>\n<p>To visualize it, modify your code to write the real and imaginary parts to a file and visualize it with Gnuplot:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gnuplot\ngnuplot&gt; <span class=\"nb\">set </span>xlabel <span class=\"s2\">\"omega\"</span>\ngnuplot&gt; <span class=\"nb\">set </span>ylabel <span class=\"s2\">\"f(omega)\"</span>\ngnuplot&gt; plot <span class=\"s2\">\"out.dat\"</span> using 1:2 with lines title <span class=\"s2\">\"FFTW\"</span>\n</code></pre></div></div>\n\n<p>If you have multiple columns (e.g., real and imaginary parts), use:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gnuplot\ngnuplot&gt; plot <span class=\"s2\">\"out.dat\"</span> using 1:2 with lines title <span class=\"s2\">\"real\"</span>,<span class=\"se\">\\</span>\n<span class=\"o\">&gt;</span> <span class=\"s2\">\"out.dat\"</span> using 1:3 with lines title <span class=\"s2\">\"imag\"</span>\n</code></pre></div></div>\n"
     
   } ,
  
   {
     
     
        "title"    : "C++",
        "category" : "",
        "tags"     : "",
        "url"      : "/cpp",
        "date"     : "",
        "content"  : "<h1 id=\"c\">C++</h1>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Github",
        "category" : "",
        "tags"     : "",
        "url"      : "/git.github",
        "date"     : "",
        "content"  : "<h1 id=\"git-github\">Git: GitHub</h1>\n\n<p><a href=\"https://github.com/\">GitHub</a> is an online platform for hosting and managing Git repositories. It provides version control, collaboration tools, and integration with various development workflows. Developers use GitHub to store code, track changes, and collaborate on projects through features like pull requests, issues, and discussions. It also supports automation, continuous integration, and project management tools. While primarily used for software development, GitHub is also popular for documentation, research, and other collaborative projects.</p>\n\n<h1 id=\"github-cli\">GitHub CLI</h1>\n\n<p>To push to a remote repository hosted on GitHub, you need to have access to it by either being invited or being the owner. Then, Git needs to authenticate your credentials to allow pushing your commits. The easiest way to manage authentication is by using the GitHub CLI (<code class=\"language-plaintext highlighter-rouge\">gh</code>).</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<ul>\n  <li>\n    <p><strong>Windows</strong></p>\n\n    <p>Install with <code class=\"language-plaintext highlighter-rouge\">winget</code>, open a terminal and run:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>winget <span class=\"nb\">install</span> <span class=\"nt\">--id</span> GitHub.cli\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>macOS</strong></p>\n\n    <p>Install with <code class=\"language-plaintext highlighter-rouge\">Homebrew</code>, open a terminal and run:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>brew <span class=\"nb\">install </span>gh\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>Linux</strong></p>\n\n    <p>Install using your package manager:</p>\n\n    <ul>\n      <li>Debian/Ubuntu (apt)</li>\n    </ul>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">(</span><span class=\"nb\">type</span> <span class=\"nt\">-p</span> wget <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>wget <span class=\"nt\">-y</span><span class=\"o\">))</span> <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo mkdir</span> <span class=\"nt\">-p</span> <span class=\"nt\">-m</span> 755 /etc/apt/keyrings <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nv\">out</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span> <span class=\"o\">&amp;&amp;</span> wget <span class=\"nt\">-nv</span> <span class=\"nt\">-O</span><span class=\"nv\">$out</span> https://cli.github.com/packages/githubcli-archive-keyring.gpg <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cat</span> <span class=\"nv\">$out</span> | <span class=\"nb\">sudo tee</span> /etc/apt/keyrings/githubcli-archive-keyring.gpg <span class=\"o\">&gt;</span> /dev/null <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo chmod </span>go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"deb [arch=</span><span class=\"si\">$(</span>dpkg <span class=\"nt\">--print-architecture</span><span class=\"si\">)</span><span class=\"s2\"> signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\"</span> | <span class=\"nb\">sudo tee</span> /etc/apt/sources.list.d/github-cli.list <span class=\"o\">&gt;</span> /dev/null <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt update <span class=\"se\">\\</span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>gh <span class=\"nt\">-y</span>\n</code></pre></div>    </div>\n\n    <ul>\n      <li>Fedora</li>\n    </ul>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>dnf config-manager addrepo <span class=\"nt\">--from-repofile</span><span class=\"o\">=</span>https://cli.github.com/packages/rpm/gh-cli.repo\n<span class=\"nb\">sudo </span>dnf <span class=\"nb\">install </span>gh <span class=\"nt\">--repo</span> gh-cli\n</code></pre></div>    </div>\n\n    <ul>\n      <li>Arch Linux</li>\n    </ul>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> github-cli\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"authenticating-with-github-cli\">Authenticating with GitHub CLI</h2>\n\n<p>Once installed, you need to authenticate with GitHub:</p>\n\n<ul>\n  <li>\n    <p>Open a terminal and run:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gh auth login\n</code></pre></div>    </div>\n  </li>\n  <li>Select <code class=\"language-plaintext highlighter-rouge\">GitHub.com</code> when prompted.</li>\n  <li>\n    <p>Choose between authenticating via <code class=\"language-plaintext highlighter-rouge\">HTTPS</code> or <code class=\"language-plaintext highlighter-rouge\">SSH</code>. If unsure, <code class=\"language-plaintext highlighter-rouge\">HTTPS</code> is the easier option.</p>\n\n    <blockquote class=\"note\">\n      <p><strong>Note:</strong><br />\nHTTPS authentication will require a web browser. This is not useful for headless installations.</p>\n    </blockquote>\n  </li>\n  <li>\n    <p>If using HTTPS, you can authenticate via a web browser or a personal access token (PAT). The recommended way is to use the web authentication:</p>\n\n    <ul>\n      <li>Select <code class=\"language-plaintext highlighter-rouge\">Login with a web browser</code> and follow the instructions to authorize GitHub CLI.</li>\n      <li>If you prefer using a PAT, generate one from <a href=\"https://github.com/settings/tokens\">GitHub’s Personal Access Token page</a>, ensuring you enable <code class=\"language-plaintext highlighter-rouge\">repo</code> scope.</li>\n    </ul>\n  </li>\n  <li>\n    <p>After authentication, verify that you’re logged in by running:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gh auth status\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<p>This will cache your credentials in Git, next time you run <code class=\"language-plaintext highlighter-rouge\">git push origin</code>, it will already have access to your account.</p>\n\n<h2 id=\"useful-commands-for-gh\">Useful commands for <code class=\"language-plaintext highlighter-rouge\">gh</code></h2>\n\n<p>Here is a list of commands you will find useful.</p>\n\n<ul>\n  <li><strong>Cloning a repository:</strong>\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gh repo clone &lt;owner&gt;/&lt;repository&gt;\n</code></pre></div>    </div>\n  </li>\n  <li><strong>Creating a new repository:</strong>\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gh repo create &lt;repository-name&gt; <span class=\"nt\">--public</span>\n</code></pre></div>    </div>\n  </li>\n  <li><strong>Viewing pull requests:</strong>\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gh <span class=\"nb\">pr </span>list\n</code></pre></div>    </div>\n  </li>\n  <li><strong>Checking notifications:</strong>\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gh notifications\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h1 id=\"github-desktop\">GitHub Desktop</h1>\n\n<p><a href=\"https://github.com/apps/desktop\">GitHub Desktop</a> is a graphical user interface (GUI) application that simplifies working with Git repositories. It allows users to clone repositories, commit changes, create branches, and push updates without using the command line.</p>\n\n<h2 id=\"installation-1\">Installation</h2>\n\n<p>Follow the instructions in their <a href=\"https://desktop.github.com/download/\">downloads page</a></p>\n"
     
   } ,
  
   {
     
     
        "title"    : "Git",
        "category" : "",
        "tags"     : "",
        "url"      : "/git",
        "date"     : "",
        "content"  : "<h1 id=\"git\">Git</h1>\n\n<p>Git is a version control system that helps track changes in files, mainly used for coding projects. It allows multiple people to work on the same project without overwriting each other’s work. With Git, you can save different versions of your project, go back to previous versions if needed, and collaborate easily. It works by storing changes in a repository, which can be kept on your computer or shared online using platforms like <a href=\"https://github.com/\">GitHub</a>. It was created by <a href=\"https://github.com/torvalds\">Linus Torvalds</a>, the creator of the Linux Kernel.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<ul>\n  <li>\n    <p><strong>Windows</strong></p>\n\n    <p>There are a few options:</p>\n\n    <ol>\n      <li>Download the wizard from the <a href=\"https://git-scm.com/downloads/win\">git downlods page</a>, execute it and follow the instructions.</li>\n      <li>Use <code class=\"language-plaintext highlighter-rouge\">winget</code>, i.e. open your terminal and execute the following command</li>\n    </ol>\n\n    <pre><code class=\"language-cmd\">winget install --id Git.Git -e --source winget\n</code></pre>\n  </li>\n  <li>\n    <p><strong>MacOS</strong></p>\n\n    <p>Open a terminal and try to run the <code class=\"language-plaintext highlighter-rouge\">git</code> command. MacOS will prompt you to install the XCode command line tool which will install <code class=\"language-plaintext highlighter-rouge\">git</code> and other developer tools as well.</p>\n  </li>\n  <li>\n    <p><strong>Linux</strong></p>\n\n    <p>Install it with your package manager, on Arch Linux</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> git\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"quick-tutorial\">Quick Tutorial</h2>\n\n<p>In this section, you will learn the typical Git workflow with the commands <code class=\"language-plaintext highlighter-rouge\">git init</code>, <code class=\"language-plaintext highlighter-rouge\">git add</code>, and <code class=\"language-plaintext highlighter-rouge\">git commit</code> for a local repository. Then we will briefly mention how to <code class=\"language-plaintext highlighter-rouge\">git push</code> to a remote repository that could be hosted on an online platform like <em>GitHub</em> or <em>GitLab</em>.</p>\n\n<h3 id=\"initializing-or-cloning-a-repository\">Initializing (or cloning) a Repository</h3>\n\n<p>First, to work with Git, you need a <em>Git repository</em>, which is a directory for your project that will be managed with Git. To create one, move to your project’s directory and run the command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git init\n</code></pre></div></div>\n\n<p>When you run <code class=\"language-plaintext highlighter-rouge\">git init</code>, it creates a new subdirectory named <code class=\"language-plaintext highlighter-rouge\">.git</code> in your current working directory. This directory contains all the necessary Git metadata for the new repository, including subdirectories for objects, references, and template files. It is a <em>special</em> directory that Git and other programs use to recognize the directory as a Git repository.</p>\n\n<p>Alternatively, if the repository already exists somewhere, you can instead clone it by providing the URL</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone &lt;repository-url&gt;\n</code></pre></div></div>\n\n<blockquote class=\"note\">\n  <p><strong>Note:</strong><br />\nIf the repository has submodules, you can add the flag</p>\n\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone &lt;repository-url&gt; <span class=\"nt\">--recurse-submodules</span>\n</code></pre></div>  </div>\n</blockquote>\n\n<h3 id=\"staging-and-committing-changes\">Staging and Committing Changes</h3>\n\n<p>After creating a <em>repository</em> you can keep working as usual. Add, modify and remove files from your code as you wish, until you want to <em>commit</em> your changes, that is, create a snapshot of the current state of the project to the project’s history so that you can check it out later.</p>\n\n<p>To create a commit, you need to first <em>track</em> and <em>stage</em> your changes. That is, Git needs to know which files it needs to look for changes before making a commit. You can know which files are being tracked and which are not, as well as other information, by running the command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git status\n</code></pre></div></div>\n\n<p>From here, you can decide which files to <em>track</em> and <em>stage</em> for your upcoming commit. As a simple example, you can add <em>all</em> of the modified files with the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add <span class=\"nb\">.</span>\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p><strong>Warning:</strong><br />\nAdding all of the files is commonly unwanted and not recommended, as it can unintentionally include temporary files, logs, or other files that should not be committed. Most of the time, it is preferable to manually add specific files and <em>bundle</em> them under a single commit:</p>\n\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add &lt;filename&gt;\n</code></pre></div>  </div>\n\n  <p>You can repeat this command as many times as needed to <em>bundle</em> all of your desired files under a single commit. You can also make separate commits for individual files when necessary. Alternatively, if you want to interactively choose files, you can use:</p>\n\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add <span class=\"nt\">-p</span>\n</code></pre></div>  </div>\n\n  <p>This allows you to review changes before staging them, which can help maintain a cleaner commit history.</p>\n</blockquote>\n\n<p>After staging the files, you need to save the changes to the repository with a commit:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Your commit message\"</span>\n</code></pre></div></div>\n\n<p>The commit message should describe the changes you made, making it easier to track the project’s history.</p>\n\n<h3 id=\"pushing-to-a-remote-repository\">Pushing to a Remote Repository</h3>\n\n<p>If you want to back up your project or collaborate with others, you can push your changes to a remote repository, i.e. a repository that is hosted in some online/cloud platform like Github. First, you need to add a remote repository URL:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git remote add origin &lt;repository-url&gt;\n</code></pre></div></div>\n\n<blockquote class=\"note\">\n  <p><strong>Note:</strong><br />\nIf your repository was cloned directly from the cloud platform. It will already have this information added. You can skip this step.</p>\n</blockquote>\n\n<p>Then, you can push your changes using:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git push <span class=\"nt\">-u</span> origin &lt;branch&gt;\n</code></pre></div></div>\n\n<p>Here <code class=\"language-plaintext highlighter-rouge\">&lt;branch&gt;</code> is typically <code class=\"language-plaintext highlighter-rouge\">main</code>.</p>\n\n<blockquote class=\"note\">\n  <p><strong>Note:</strong><br />\nIf your repository was cloned directly from the cloud platform. Just run</p>\n\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git push origin &lt;branch&gt;\n</code></pre></div>  </div>\n</blockquote>\n\n<p>This command uploads your commits to the remote repository and sets up tracking so future pushes can be done with <code class=\"language-plaintext highlighter-rouge\">git push</code>.</p>\n\n<h3 id=\"the-workflow-in-a-nutshell\">The workflow in a nutshell</h3>\n\n<p>The following steps summarize what you will be doint 90% of the times with git.</p>\n\n<ol>\n  <li>Initialize/clone a repository: <code class=\"language-plaintext highlighter-rouge\">git init</code> or <code class=\"language-plaintext highlighter-rouge\">git clone</code></li>\n  <li>Add files to the staging area: <code class=\"language-plaintext highlighter-rouge\">git add &lt;filename&gt;</code> or <code class=\"language-plaintext highlighter-rouge\">git add .</code></li>\n  <li>Commit changes: <code class=\"language-plaintext highlighter-rouge\">git commit -m \"message\"</code></li>\n  <li>Push changes: <code class=\"language-plaintext highlighter-rouge\">git push origin main</code></li>\n</ol>\n\n<p>There is a lot more to know about git, but you can learn the specific features as you need them.</p>\n\n<h1 id=\"branches\">Branches</h1>\n\n<p>Branches allow parallel development without affecting the main code.</p>\n\n<ul>\n  <li>\n    <p>Create a new branch:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git branch &lt;branch-name&gt;\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Switch to a branch:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git checkout &lt;branch-name&gt;\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Create and switch to a new branch:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git checkout <span class=\"nt\">-b</span> &lt;branch-name&gt;\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>List branches:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git branch\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Merge a branch into the current one:</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git merge &lt;branch-name&gt;\n</code></pre></div>    </div>\n  </li>\n  <li>Delete a branch:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git branch <span class=\"nt\">-d</span> &lt;branch-name&gt;  <span class=\"c\"># Safe delete (only if merged)</span>\ngit branch <span class=\"nt\">-D</span> &lt;branch-name&gt;  <span class=\"c\"># Force delete</span>\n</code></pre></div>    </div>\n  </li>\n  <li>Checkout a previous commit (detached HEAD):\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git checkout &lt;commit-hash&gt;\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h1 id=\"ignoring-files\">Ignoring Files</h1>\n\n<p>To prevent certain files from being tracked by Git, create a <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> file in the repository root and list the files or directories to ignore.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Ignore compiled files\n*.o\n*.exe\n\n# Ignore logs\nlogs/\n*.log\n\n# Ignore environment files\n.env\n</code></pre></div></div>\n\n<p>To apply changes after modifying <code class=\"language-plaintext highlighter-rouge\">.gitignore</code>, use:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git <span class=\"nb\">rm</span> <span class=\"nt\">--cached</span> &lt;file&gt;\n</code></pre></div></div>\n\n<h1 id=\"see-also\">See also</h1>\n\n<ul>\n  <li><a href=\"git.github\">Github</a></li>\n</ul>\n"
     
   } ,
  
   {
     
     
        "title"    : "Home",
        "category" : "",
        "tags"     : "",
        "url"      : "/home",
        "date"     : "",
        "content"  : "<h1 id=\"welcome-to-hakodocs\">Welcome to HakoDocs!</h1>\n<p>HakoDocs is a public compilation of tech-related notes that address specific problems I’ve encountered throughout my life.\nYou can expect to find <em>How to do \\(X\\)</em> guides for a variety of topics, primarily related to Linux, programming languages, servers, and more.\nI started this project as a personal collection of notes, and as I began sharing them with my colleagues, it grew into something more.\nThe same colleagues these notes once helped started contributing to them. I hope you, like them, find something useful within this <em>hako</em>.</p>\n\n<p><em>leogabac (main contributor)</em></p>\n\n<blockquote class=\"note\">\n  <p>Many of the content in these notes is centered around Arch Linux as that is my daily driver distribution.</p>\n</blockquote>\n\n<h2 id=\"why-hakodocs\">Why HakoDocs?</h2>\n\n<p>For some reason, <a href=\"https://github.com/leogabac\">leogabac</a> (the creator) is obsessed with VTubers, so he tries to include references in all of his projects. In this case, <em>HakoDocs</em> is a wordplay on multiple levels:</p>\n\n<ul>\n  <li>Since most of these wiki pages are somewhat <em>chaotic</em> to organize, <em>Hako</em> primarily references <a href=\"https://www.youtube.com/channel/UCgmPnx-EEeOrZSg5Tiw7ZRQ\"><em>Hakos Baelz</em></a> from <a href=\"https://hololive.hololivepro.com/en/talents?gp=promise\">Hololive English Promise</a>, the embodiment of chaos. The word <em>Docs</em> was added since this project is primarily for documentation.</li>\n  <li>The word <em>hako</em> means <em>box</em> in Japanese, symbolizing that this wiki is a “box” of documentation.</li>\n  <li>It could also be read as <em>Hack o’ Docs</em>, giving it a hacker-esque feel.</li>\n</ul>\n\n<h1 id=\"quick-navigation\">Quick Navigation</h1>\n\n<p>Here is a list of the (most useful) articles you will find in this wiki.</p>\n\n<h2 id=\"general\">General</h2>\n\n<ul class=\"three-column-list\">\n  <li><a href=\"archlinux\">Arch Linux</a></li>\n  <li><a href=\"timeshift\">Timeshift</a></li>\n  <li><a href=\"zerotier\">Zero Tier</a></li>\n</ul>\n\n<h2 id=\"linux\">Linux</h2>\n\n<ul class=\"three-column-list\">\n  <li><a href=\"linux.clitips\">Linux CLI Tips</a></li>\n  <li><a href=\"linux.settings\">Common Linux Settings</a></li>\n  <li><a href=\"linux.dump\">Dump</a></li>\n</ul>\n\n<h2 id=\"git\">Git</h2>\n\n<ul class=\"three-column-list\">\n  <li><a href=\"git\">Git</a></li>\n  <li><a href=\"git.github\">GitHub</a></li>\n</ul>\n\n<h2 id=\"python\">Python</h2>\n\n<ul class=\"three-column-list\">\n  <li><a href=\"python\">Python</a></li>\n  <li><a href=\"python.jupyter\">Jupyter Notebook</a></li>\n</ul>\n\n<h2 id=\"llms\">LLMs</h2>\n\n<ul class=\"three-column-list\">\n  <li><a href=\"ollama\">Ollama</a></li>\n  <li><a href=\"ollama.openwebui\">Ollama: Open WebUI</a></li>\n</ul>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "index.html",
        "category" : "",
        "tags"     : "",
        "url"      : "/assets/blog/",
        "date"     : "",
        "content"  : "<!--- this file is needed for automatic creation of blog page --->"
     
   } ,
  
   {
     
     
        "title"    : "Julia",
        "category" : "",
        "tags"     : "",
        "url"      : "/julia",
        "date"     : "",
        "content"  : "<h1 id=\"julia\">Julia</h1>\n\n<p>Julia is a high-level, high-performance programming language designed for numerical computing and scientific applications. It combines the ease of use of languages like Python with the speed of compiled languages like C. Julia features just-in-time (JIT) compilation, making it highly efficient for mathematical operations, data analysis, and machine learning. It supports multiple dispatch, parallel computing, and seamless integration with Python, C, and Fortran.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>For specific installation instructions, see the <a href=\"https://julialang.org/downloads/\">Julia Downloads Page</a>. Generic installs can be done via</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-fsSL</span> https://install.julialang.org | sh\n</code></pre></div></div>\n<p>according to their <a href=\"https://docs.julialang.org/en/v1/manual/installation/\">manual</a>.</p>\n\n<p><strong>Arch Linux</strong></p>\n\n<p>According to the <a href=\"https://wiki.archlinux.org/title/Julia\">Julia Arch Wiki Page</a> we can install <code class=\"language-plaintext highlighter-rouge\">juliaup</code>, the Julia version manager, from the AUR</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> juliaup\n</code></pre></div></div>\n\n<p>After the installation, run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>julia\n</code></pre></div></div>\n<p>This will install the latest julia version available in <code class=\"language-plaintext highlighter-rouge\">juliaup</code>. It is not necessary to add to PATH.</p>\n\n<h1 id=\"breaking-bugs\">Breaking Bugs</h1>\n\n<p>Here is a list on workarounds for known bugs.</p>\n\n<ul>\n  <li><strong>Stack Shared Object</strong></li>\n</ul>\n\n<p>As of Feb 23 2025, there is a problem that throws the following error when installing from <code class=\"language-plaintext highlighter-rouge\">juliaup</code> from the AUR.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Installing Julia 1.11.3+0.x64.linux.gnu\nERROR: Unable to load dependent library /home/frieren/.julia/juliaup/julia-1.11.3+0.x64.linux.gnu/bin/../lib/julia/libopenlibm.so\nMessage:/home/frieren/.julia/juliaup/julia-1.11.3+0.x64.linux.gnu/bin/../lib/julia/libopenlibm.so: cannot enable executable stack as shared object requires: Invalid argument\n</code></pre></div></div>\n\n<p>This was first posted in the <a href=\"https://discourse.julialang.org/t/error-cannot-enable-executable-stack-when-starting-julia-solved/125655\">discourse</a> and then generated an <a href=\"https://github.com/JuliaLang/julia/issues/57250\">issue</a> on the Julia repo.</p>\n\n<p>To solve temporarily this problem, install</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> execstack\n</code></pre></div></div>\n<p>and run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>execstack <span class=\"nt\">-c</span> ~/.julia/juliaup/julia-1.11.3+0.x64.linux.gnu/lib/julia/libopenlibm.so\n</code></pre></div></div>\n\n<h1 id=\"see-also\">See also</h1>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Linux CLI Tips",
        "category" : "",
        "tags"     : "",
        "url"      : "/linux.clitips",
        "date"     : "",
        "content"  : "<h1 id=\"linux-cli-tips\">Linux: CLI Tips</h1>\n\n<p>This is a collection of quick commands you can use to accomplish very specific tasks using the command line. This is a continuously growing collection, and contributions are accepted.</p>\n\n<p>See the Table of Contents for a full guide.</p>\n\n<h1 id=\"images\">Images</h1>\n\n<h2 id=\"merge-images-to-pdf\">Merge images to PDF</h2>\n\n<p>Depends on ‘imagemagick’.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>convert <span class=\"si\">$(</span><span class=\"nb\">ls</span> <span class=\"nt\">-v</span> <span class=\"k\">*</span>.jpg<span class=\"si\">)</span> out.pdf\n</code></pre></div></div>\n\n<h2 id=\"merge-images-to-video\">Merge images to video</h2>\n<p>Combine images (frames) into a single video. Depends on ‘ffmpeg’</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ffmpeg <span class=\"nt\">-framerate</span> 30 <span class=\"nt\">-i</span> %d.png <span class=\"nt\">-c</span>:v libx264 <span class=\"nt\">-pix_fmt</span> yuv420p output.mp4\n</code></pre></div></div>\n<p>in case it fails, you can try instead</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ffmpeg <span class=\"nt\">-framerate</span> 15 <span class=\"nt\">-i</span> %d.png <span class=\"nt\">-vf</span> <span class=\"s2\">\"scale=trunc(iw/2)*2:trunc(ih/2)*2\"</span> <span class=\"nt\">-c</span>:v libx264 <span class=\"nt\">-pix_fmt</span> yuv420p output.mp4\n</code></pre></div></div>\n\n<h1 id=\"video\">Video</h1>\n\n<h2 id=\"convert-format\">Convert format</h2>\n<p>Depends on ‘ffmpeg’.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ffmpeg -i video.mkv -codec copy video_out.mp4\n</code></pre></div></div>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Linux Dump: Laptop is laggy after suspend",
        "category" : "",
        "tags"     : "",
        "url"      : "/linux.dump.laggy_suspend",
        "date"     : "",
        "content"  : "<h1 id=\"linux-dump-laptop-is-laggy-after-suspend\">Linux Dump: Laptop is laggy after suspend</h1>\n\n<p>This guide started to become very long as I try to solve this problem. Here is basically a log on everything I tried.</p>\n\n<h1 id=\"symptoms\">Symptoms</h1>\n\n<p>After resuming from suspend, the CPU clock is stuck near the absolute minimum, in my case ~500 MHz affecting general performance.</p>\n\n<p>The issue seems to appear when the laptops is suspended <em>on low battery</em>.</p>\n\n<h1 id=\"ultimate-solution\">Ultimate solution</h1>\n\n<p>Still haven’t found anything very specific. Best results come from</p>\n\n<ul>\n  <li>Going back to <code class=\"language-plaintext highlighter-rouge\">acpi-cpufreq</code> scaling driver.</li>\n  <li>Daily-driving the <code class=\"language-plaintext highlighter-rouge\">linux-lts</code> kernel.</li>\n  <li>Using <code class=\"language-plaintext highlighter-rouge\">tlp</code> for managing battery. See <a href=\"linux.dump#TLP\">TLP</a> for information on how to install and configure it.</li>\n  <li>Suspending on power and decent battery levels when possible.</li>\n</ul>\n\n<h1 id=\"the-journey\">The Journey</h1>\n\n<h2 id=\"software-level-solutions\">Software-level solutions</h2>\n\n<p>There are several software-level solutions you can try, such ac</p>\n<ol>\n  <li>Changing power profile.</li>\n  <li>Forcing frequency scaling to performance mode.</li>\n  <li>Change suspend mode. In my case, my laptop only allows <code class=\"language-plaintext highlighter-rouge\">s2idle</code>. You can see more information on the <a href=\"https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate\">Suspend and Hibernate Arch Wiki page</a>.</li>\n</ol>\n\n<blockquote class=\"note\">\n  <p>Nothing from this worked for me. But it could work for you.</p>\n</blockquote>\n\n<h2 id=\"firmware-level-solutions\">Firmware-level solutions</h2>\n\n<p>If software does not work, then this might be a firmware/BIOS problem.</p>\n\n<ol>\n  <li>Check for BIOS updates.</li>\n  <li>Disable power-saving features on the BIOS options.</li>\n</ol>\n\n<blockquote class=\"note\">\n  <p>Nothing from this worked for me. But it could work for you.</p>\n</blockquote>\n\n<h2 id=\"driver-level-solutions\">Driver-level solutions</h2>\n\n<p>The issue might be driver-related. In particular my laptops uses the <code class=\"language-plaintext highlighter-rouge\">amd-pstate-epp</code> driver, which has some related-reported issues <a href=\"https://bugzilla.kernel.org/show_bug.cgi?id=217931\">on bugzilla</a> and <a href=\"https://www.reddit.com/r/linuxquestions/comments/z7rk35/really_weird_bug_with_new_amd_pstateepp_v4_driver/\">on reddit as well</a>.</p>\n\n<p>To figure out your driver, run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cpupower frequency-info\n</code></pre></div></div>\n<p>A workaround for this is to change the driver on the boot options from GRUB. There are several options,  and make a new GRUB config file with the command</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>grub-mkconfig <span class=\"nt\">-o</span> /boot/grub/grub.cfg <span class=\"o\">&amp;&amp;</span> reboot\n</code></pre></div></div>\n\n<ul>\n  <li>To use the regular <code class=\"language-plaintext highlighter-rouge\">amd-pstate</code> scaling driver</li>\n</ul>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_CMDLINE_LINUX_DEFAULT=\"... amd_pstate=disable\"\n</code></pre></div></div>\n\n<blockquote class=\"note\">\n  <p>Did not work for me after some days of testing. But I still encourage whoever is reading this to try this approach.</p>\n</blockquote>\n\n<ul>\n  <li>To use the older <code class=\"language-plaintext highlighter-rouge\">acpi-cpufreq</code> driver</li>\n</ul>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_CMDLINE_LINUX_DEFAULT=\"... initcall_blacklist=amd_pstate_init amd_pstate.enable=0\"\n</code></pre></div></div>\n\n<blockquote class=\"tip-noheader\">\n  <p>Best results so far, but still the problem arises from time to time.\nIt seems to be that the problem only arises when <em>on battery power</em>. Nothing on software seems to fix this, so I believe it is a BIOS/firmware issue.</p>\n</blockquote>\n\n<h2 id=\"ignore-processor-power-cap\">Ignore Processor Power Cap</h2>\n\n<p>This seems to fix the problem for some people. Ignoring the Processor Power Cap (PPC).</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_CMDLINE_LINUX_DEFAULT=\"... processor.ignore_ppc=1\"\n</code></pre></div></div>\n\n<blockquote class=\"note\">\n  <p>Did not work for me. But I still encourage whoever is reading this to try this approach.</p>\n</blockquote>\n\n<h2 id=\"changing-to-lts-kernel\">Changing to LTS kernel</h2>\n\n<p>The LTS kernel might have better and more stable behavior. Did not work for me, but you can still try. Install the kernel by</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> linux-lts linux-lts-headers\n</code></pre></div></div>\n\n<p>Add the following to your GRUB configuration so that it becomes easier to return to the last used kernel.</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_DEFAULT=saved\nGRUB_SAVEDEFAULT=true\n</code></pre></div></div>\n\n<p>remake the GRUB configuration and reboot.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>grub-mkconfig <span class=\"nt\">-o</span> /boot/grub/grub.cfg <span class=\"o\">&amp;&amp;</span> reboot\n</code></pre></div></div>\n<p>You will find the kernels under “Advances Options for Arch Linux”, but when both kernels are installed, GRUB defaults to the LTS.</p>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Linux: Dump",
        "category" : "",
        "tags"     : "",
        "url"      : "/linux.dump",
        "date"     : "",
        "content"  : "<h1 id=\"linux-dump\">Linux: Dump</h1>\n<p>This is a list of random problems I have had to solve at some point.</p>\n\n<h1 id=\"general-guides\">General guides</h1>\n\n<h2 id=\"tlp\">TLP</h2>\n\n<p>Install packages</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> tlp tlp-rdw acpi_call ethtool smartmontools\n</code></pre></div></div>\n<p>and enable/start services</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> tlp.service\n<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> NetworkManager-dispatcher.service\n<span class=\"nb\">sudo </span>systemctl mask systemd-rfkill.service\n<span class=\"nb\">sudo </span>systemctl mask systemd-rfkill.socket\n</code></pre></div></div>\n<p>then we need to edit a configuration under <code class=\"language-plaintext highlighter-rouge\">/etc/tlp.conf</code>. It already has sensible defaults, but the file has all the information you need. For reference, here are all the parameters I changed.</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/tlp.conf\"><div class=\"highlight\"><pre class=\"highlight\"><code>CPU_SCALING_GOVERNOR_ON_AC=performance\nCPU_SCALING_GOVERNOR_ON_BAT=powersave\n\nCPU_ENERGY_PERF_POLICY_ON_AC=performance\n\nPLATFORM_PROFILE_ON_AC=balanced\nPLATFORM_PROFILE_ON_BAT=low-power\n\nSTART_CHARGE_THRESH_BAT0=75\nSTOP_CHARGE_THRESH_BAT0=80\n</code></pre></div></div>\n\n<h2 id=\"migrating-wpa_supplicant-to-iwd\">Migrating <code class=\"language-plaintext highlighter-rouge\">wpa_supplicant</code> to <code class=\"language-plaintext highlighter-rouge\">iwd</code></h2>\n\n<p>The Intel Wireless Daemon is a modern alternative to <code class=\"language-plaintext highlighter-rouge\">wpa_supplicant</code> with</p>\n<ol>\n  <li>Faster reconnections</li>\n  <li>Simple and more efficient</li>\n  <li>Better security</li>\n  <li>Drop-in replacement for NetworkManager</li>\n</ol>\n\n<p>To change to it install the <code class=\"language-plaintext highlighter-rouge\">iwd</code> package</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> iwd\n</code></pre></div></div>\n<p>Stop and disable <code class=\"language-plaintext highlighter-rouge\">wpa_supplicant</code></p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl stop wpa_supplicant\n<span class=\"nb\">sudo </span>systemctl disable wpa_supplicant\n</code></pre></div></div>\n<p>Also mask it to never restart automatically</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl mask wpa_supplicant\n</code></pre></div></div>\n<p>Enable and start <code class=\"language-plaintext highlighter-rouge\">iwd</code></p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> iwd\n</code></pre></div></div>\n<p>Configure NetworkManager by creating or modifying the file</p>\n\n<div class=\"language-bash codeblock highlighter-rouge\" data-title=\"/etc/NetworkManager/conf.d/wifi-backend.conf\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>device]\nwifi.backend<span class=\"o\">=</span>iwd\n</code></pre></div></div>\n<p>and restart</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl restart NetworkManager\n</code></pre></div></div>\n<p>You will be asked again for Network authentication.</p>\n\n<h3 id=\"connecting-iwd-to-eap-peap-networks\">Connecting <code class=\"language-plaintext highlighter-rouge\">iwd</code> to EAP-PEAP networks</h3>\n\n<p>Universities and Organizations have some tricky networks that cannot be configured using <code class=\"language-plaintext highlighter-rouge\">iwctl</code> directly, and need to be done manually. For this you need to create a file called <code class=\"language-plaintext highlighter-rouge\">essid.8021x</code> under <code class=\"language-plaintext highlighter-rouge\">/var/lib/iwd/essid.8021x</code>, where <code class=\"language-plaintext highlighter-rouge\">essid</code> is the network name. The file structure is as follows, and you only need to fill in the spaces.</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/var/lib/iwd/essid.8021x\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Security]\nEAP-Method=PEAP\nEAP-Identity=anonymous@realm.edu\nEAP-PEAP-CACert=/path/to/root.crt\nEAP-PEAP-ServerDomainMask=radius.realm.edu\nEAP-PEAP-Phase2-Method=MSCHAPV2\nEAP-PEAP-Phase2-Identity=johndoe@realm.edu\nEAP-PEAP-Phase2-Password=hunter2\n\n[Settings]\nAutoConnect=true\n</code></pre></div></div>\n\n<p>For example, at <em>Tec</em> you need something like. If you are at this institution, you should know how to fill-in the information.</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/var/lib/iwd/Tec.8021x\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Security]\nEAP-Method=PEAP\nEAP-Identity=a0xxxxxxx\nEAP-PEAP-Phase2-Method=MSCHAPV2\nEAP-PEAP-Phase2-Identity=a0xxxxxxx\nEAP-PEAP-Phase2-Password=your_passwd\n\n[Settings]\nAutoConnect=true\n</code></pre></div></div>\n<p>NetworkManager will connect automatically to the network.</p>\n\n<h1 id=\"troubleshooting-dump\">Troubleshooting Dump</h1>\n\n<h2 id=\"laptop-is-laggy-after-suspend\">Laptop is <em>laggy</em> after suspend</h2>\n\n<p>See <a href=\"linux.dump.laggy_suspend\">Laptop is laggy after suspend</a> for more information.</p>\n\n<p>##</p>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Linux: Settings",
        "category" : "",
        "tags"     : "",
        "url"      : "/linux.settings",
        "date"     : "",
        "content"  : "<h1 id=\"linux-settings\">Linux: Settings</h1>\n\n<p>This is a list of common settings one might want to change at some point</p>\n\n<h1 id=\"battery\">Battery</h1>\n\n<h2 id=\"using-tlp\">Using TLP</h2>\n<p>TLP is a common linux utility for improving battery life. Some things that you can do are:</p>\n<ul>\n  <li>Enable performance/powersave modes when on AC and Battery automatically.</li>\n  <li>Enable <em>advanced</em> powersaving features like USB autosuspend, ACPI sleep states, LAN, Wifi, and more.</li>\n  <li>Enables the setup of battery thresholds.</li>\n</ul>\n\n<p>See the <a href=\"linux.dump#TLP\">Hakodocs’ TLP section</a> for more information on the installation process and setup. Additionally, you can read the <a href=\"https://linrunner.de/tlp/index.html\">TLP documentation</a>.</p>\n\n<h2 id=\"using-ppd\">Using PPD</h2>\n\n<p>The Power Profiles Daemon (DDP) is a common, and simple way to manage power profiles on Linux with no configuration. On Arch Linux:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> power-profiles-daemon\n<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> power-profiles-daemon\n</code></pre></div></div>\n<p>You can install a manager for your DE, on KDE Plasma:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> power-devil\n</code></pre></div></div>\n<p>then you will be able to change power profiles from your panel/taskbar.</p>\n\n<h2 id=\"manually-adjusting-charging-thresholds\">Manually adjusting charging thresholds</h2>\n\n<p>You can manually adjust the charging thresholds if your hardware allows it. As a reference you can check your current values by running</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> /sys/class/power_supply/BAT0/charge_control_start_threshold\n<span class=\"nb\">echo</span> /sys/class/power_supply/BAT0/charge_control_end_threshold\n</code></pre></div></div>\n<p>and create a systemd service that rewrites them on boot</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/systemd/system/battery.service\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Unit]\nDescription=Set battery charge thresholds\nAfter=multi-user.target\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c \"echo 75 &gt; /sys/class/power_supply/BAT0/charge_control_start_threshold\"\nExecStart=/bin/sh -c \"echo 85 &gt; /sys/class/power_supply/BAT0/charge_control_end_threshold\"\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></div></div>\n<p>then simply enable the service</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> battery.service\n</code></pre></div></div>\n\n<h1 id=\"grub\">GRUB</h1>\n\n<h2 id=\"remaking-the-grub-configuration-file\">Remaking the GRUB configuration file</h2>\n\n<p>Not a setting <em>per se</em>, but it is useful to have this command at hand somewhere.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>grub-mkconfig <span class=\"nt\">-o</span> /boot/grub/grub.cfg\n</code></pre></div></div>\n\n<h2 id=\"show-kernel-logs\">Show kernel logs</h2>\n\n<p>To show the kernel logs on boot for a <em>hacker</em> feeling, edit the <code class=\"language-plaintext highlighter-rouge\">GRUB_CMDLINE_LINUX_DEFAULT</code> variable in your GRUB configuration to contain a <code class=\"language-plaintext highlighter-rouge\">loglevel</code>.</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3\"\n</code></pre></div></div>\n\n<p>Make sure to remove <code class=\"language-plaintext highlighter-rouge\">splash</code> or <code class=\"language-plaintext highlighter-rouge\">quiet</code> if they appear.</p>\n\n<h2 id=\"remember-the-last-launched-entry\">Remember the last launched entry</h2>\n\n<p>It is very helpful, specially when dual booting, to make GRUB default to the last launched entry. To do this, edit your GRUB configuration to contain</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_DEFAULT=saved\nGRUB_SAVEDEFAULT=true\n</code></pre></div></div>\n\n<h2 id=\"detect-windows-entry\">Detect Windows entry</h2>\n\n<p>To make GRUB detect your Windows installation that is either on a separate partition or disk, first install <code class=\"language-plaintext highlighter-rouge\">os-prober</code></p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> os-prober\n</code></pre></div></div>\n<p>and add/uncomment to your configuration file</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/default/grub\"><div class=\"highlight\"><pre class=\"highlight\"><code>GRUB_DISABLE_OS_PROBER=false\n</code></pre></div></div>\n<p>Regenerate your configuration file, and reboot.</p>\n\n<h2 id=\"make-a-custom-font\">Make a custom font</h2>\n\n<h2 id=\"add-a-theme-to-grub\">Add a theme to GRUB</h2>\n\n<h1 id=\"sddm\">SDDM</h1>\n\n<h2 id=\"high-resolution-displays\">High Resolution Displays</h2>\n\n<p>Following the <a href=\"https://wiki.archlinux.org/title/SDDM\">SDDM Arch Wiki Page</a>. To scale the SDDM login screen, first create/edit the file</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/sddm.conf.d/hidpi.conf\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Wayland]\nEnableHiDPI=true\n\n[X11]\nEnableHiDPI=true\n</code></pre></div></div>\n\n<p>When using KDE Plasma, which has a Qt-based greeter, add the following</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[General]\nGreeterEnvironment=QT_SCREEN_SCALE_FACTORS=2,QT_FONT_DPI=192\n</code></pre></div></div>\n\n<h2 id=\"remapping-keys-with-keyd\">Remapping keys with <code class=\"language-plaintext highlighter-rouge\">keyd</code></h2>\n\n<p>Sometimes it is really useful to remap keys to another ones, e.g. <code class=\"language-plaintext highlighter-rouge\">CapsLock</code> to <code class=\"language-plaintext highlighter-rouge\">Esc</code> or <code class=\"language-plaintext highlighter-rouge\">Ctrl</code>. To do this, we use the <code class=\"language-plaintext highlighter-rouge\">keyd</code> software, on arch-based distriutions</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> keyd\n<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> keyd\n</code></pre></div></div>\n\n<p>Then you need to make a configuration file either systemwide or for your user only</p>\n\n<div class=\"language-bash codeblock highlighter-rouge\" data-title=\"usr/share/applications/steam.desktop\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">PrefersNonDefaultGPU</span><span class=\"o\">=</span><span class=\"nb\">false</span>\n</code></pre></div></div>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Minecraft",
        "category" : "",
        "tags"     : "",
        "url"      : "/minecraft",
        "date"     : "",
        "content"  : "<h1 id=\"minecraft\">Minecraft</h1>\n\n<p>Swedish goodness.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>On Arch Linux, you can get the <code class=\"language-plaintext highlighter-rouge\">minecraft-launcher</code> official launcher from the AUR.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> minecraft-launcher\n</code></pre></div></div>\n\n<h1 id=\"breaking-bugs\">Breaking Bugs</h1>\n\n<p>Here is a list on workarounds for knwon bugs.</p>\n\n<ul>\n  <li>\n    <p><strong>Unexpected error when opening the launcher</strong></p>\n\n    <p>As of March 18th 2025, there is a bug in which when opening <code class=\"language-plaintext highlighter-rouge\">minecraft-launcher</code> from the AUR, it gives the following error</p>\n\n    <blockquote>\n      <p>Whoops! An unexpected issue occurred; we are sorry for the inconvenience. Please try restarting your Launcher. If that does not resolve the issue, please log a bug report.</p>\n    </blockquote>\n\n    <p>As pointed out by Reddit user <a href=\"https://www.reddit.com/r/archlinux/comments/1j0r8my/comment/mfnd5t7/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button\">SoulCommander12</a> in <a href=\"https://www.reddit.com/r/archlinux/comments/1j0r8my/minecraft_launcher_wont_start/\">r/archlinux</a>, the issue is solved by deleting the directory <code class=\"language-plaintext highlighter-rouge\">webcache2/</code></p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">rm</span> <span class=\"nt\">-r</span> ~/.minecraft/webcache2/\n</code></pre></div>    </div>\n\n    <p>However, the launcher everytime it is opened it creates a new <code class=\"language-plaintext highlighter-rouge\">webcache2/</code> directory. It will be necessary to delete it everytime you need ot open minecraft. Third party launchers like <a href=\"https://aur.archlinux.org/packages/gdlauncher-bin\"><code class=\"language-plaintext highlighter-rouge\">gdlauncher-bin</code></a> from the AUR work without issues.</p>\n  </li>\n</ul>\n\n<h1 id=\"installing-mods\">Installing mods</h1>\n\n<p>To install mods using <a href=\"https://fabricmc.net/\">fabric</a>, it is necessary to install the modloader. On Linux, the preferred way is to use a third-party launcher like GDLauncher. On Arch Linux, install the package <a href=\"https://aur.archlinux.org/packages/gdlauncher-bin\"><code class=\"language-plaintext highlighter-rouge\">gdlauncher-bin</code></a> from the AUR and follow <a href=\"https://wiki.fabricmc.net/player:tutorials:install_gdlauncher:linux\">their documentation</a> for setting it up.</p>\n\n<p>To use the official <code class=\"language-plaintext highlighter-rouge\">minecraft-launcher</code></p>\n<ol>\n  <li>Download the <a href=\"https://fabricmc.net/use/installer/\">universar JAR file</a></li>\n  <li>Make sure to have a Java Runtime Environment installed. For Arch Linux, visit the <a href=\"https://wiki.archlinux.org/title/Java\">Java Arch Wiki Page</a></li>\n  <li>Run the installer\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>java <span class=\"nt\">-jar</span> &lt;fabric installer&gt;.jar\n</code></pre></div>    </div>\n    <p>After this is done, simply move the mods under <code class=\"language-plaintext highlighter-rouge\">~/.minecraft/mods/</code></p>\n  </li>\n</ol>\n"
     
   } ,
  
   {
     
     
        "title"    : "Ollama",
        "category" : "",
        "tags"     : "",
        "url"      : "/ollama",
        "date"     : "",
        "content"  : "<h1 id=\"ollama\">Ollama</h1>\n\n<p>Ollama is an application that lets you download and run offline LLMs.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Generally for Linux:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-fsSL</span> https://ollama.com/install.sh | sh\n</code></pre></div></div>\n\n<p>For Arch Linux you can install one of three packages</p>\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">ollama</code> for CPU Models</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">ollama-cuda</code> for NVIDIA GPUs</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">ollama-rocm</code> for AMD GPUs</li>\n</ol>\n\n<p>Then start/enable the daemon</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl start ollama.service\n<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>ollama.service\n</code></pre></div></div>\n\n<p>Or simply run in a command line for quick testing</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ollama serve\n</code></pre></div></div>\n\n<h2 id=\"running-a-model\">Running a model</h2>\n\n<p>To run a model, first look in the <a href=\"https://ollama.com/library\">Ollama library</a> for the model name you want to use. For example</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ollama run deepseek-r1:1.5b\n</code></pre></div></div>\n\n<p>This will download, run and start the prompt in a therminal with the LLM.</p>\n\n<blockquote class=\"tip\">\n  <p>In the model, write <code class=\"language-plaintext highlighter-rouge\">/?</code> for help and <code class=\"language-plaintext highlighter-rouge\">/bye</code> to exit.</p>\n</blockquote>\n\n<h1 id=\"amd-gpus\">AMD GPUs</h1>\n\n<p>Ollama has <a href=\"https://ollama.com/blog/amd-preview\">limited support</a> for AMD discrete GPUs since the ROCm technology only support a few, and very recent models. Nevertheless, it is still possible to offload ollama’s processing into unsopported integrated or discrete GPUs by changing the <code class=\"language-plaintext highlighter-rouge\">HSA_OVERRIDE_GFX_VERSION</code> environment variable when launching ollama.</p>\n\n<p>First we need to figure out the <em>GFX</em> version that applies to your particular GPU. Extracted from the <a href=\"https://wiki.archlinux.org/title/Ollama\">Ollama Arch Wiki Page</a>, first execute.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/opt/rocm/bin/rocminfo | <span class=\"nb\">grep </span>amdhsa\n</code></pre></div></div>\n<p>This will query the exact GFX version to your system. It will give you either three of four digits.</p>\n<ul>\n  <li>If you have four digits, they are interpreted as <code class=\"language-plaintext highlighter-rouge\">XXYZ</code>.</li>\n  <li>If you have three digits, then <code class=\"language-plaintext highlighter-rouge\">XYZ</code></li>\n</ul>\n\n<p>Remember these digits, as your GFX version is either <code class=\"language-plaintext highlighter-rouge\">XX.Y.Z</code> or <code class=\"language-plaintext highlighter-rouge\">X.Y.Z</code> depending on whether you got three or four digits.</p>\n\n<p>Then find all of the installed <code class=\"language-plaintext highlighter-rouge\">rocblas</code> kernels</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find /opt/rocm/lib/rocblas/library <span class=\"nt\">-name</span> <span class=\"s1\">'Kernels.so-*'</span>\n</code></pre></div></div>\n<p>And find the closest to your actual version following these rules</p>\n<ol>\n  <li>For the <code class=\"language-plaintext highlighter-rouge\">X</code> part, it must be strictly equal to the actual version.</li>\n  <li>For the <code class=\"language-plaintext highlighter-rouge\">Y</code> part, mismatch is allowed, but it must be no greater than the the actual version.</li>\n  <li>For the <code class=\"language-plaintext highlighter-rouge\">Z</code> part, mismatch is allowed, but it must be no greater than the the actual version.</li>\n</ol>\n\n<p>As a test, if running, stop the ollama daemon</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl stop ollama.service\n</code></pre></div></div>\n<p>Execute the following with your GFX version</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">HSA_OVERRIDE_GFX_VERSION</span><span class=\"o\">=</span>X.Y.Z ollama serve\n</code></pre></div></div>\n<p>and run a model to test if the GPU is now being used. If it is still not being used, follow the same steps to figure out the correct GFX version until you get the right numbers.</p>\n\n<p>Once you made sure which is the correct environment variable, edit the ollama daemon</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl edit <span class=\"nt\">--full</span> ollama.service\n</code></pre></div></div>\n<p>This will open the daemon configuration file, look for the <code class=\"language-plaintext highlighter-rouge\">[Service]</code> section and add</p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"/etc/systemd/system/ollama.service\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Service]\nEnvironment=\"HSA_OVERRIDE_GFX_VERSION=X.Y.Z\"\nExecStart=/usr/bin/ollama serve\n</code></pre></div></div>\n\n<p>Finally, perform a daemon reload</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl daemon-reload\n</code></pre></div></div>\n<p>and restart the ollama daemon</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl restart ollama.service\n</code></pre></div></div>\n\n<h1 id=\"see-also\">See also</h1>\n<ul>\n  <li><a href=\"ollama.openwebui\">Ollama: Open WebUI</a></li>\n</ul>\n"
     
   } ,
  
   {
     
     
        "title"    : "Ollama: Open Web UI",
        "category" : "",
        "tags"     : "",
        "url"      : "/ollama.openwebui",
        "date"     : "",
        "content"  : "<h1 id=\"ollama-open-web-ui\">Ollama: Open Web UI</h1>\n\n<p>This is a guide on how to integrate <code class=\"language-plaintext highlighter-rouge\">ollama</code> with <a href=\"https://openwebui.com/\">Open WebUI</a> for self-hosting LLMs.</p>\n\n<p>First install <code class=\"language-plaintext highlighter-rouge\">docker</code> and <code class=\"language-plaintext highlighter-rouge\">docker-compose</code></p>\n\n<h2 id=\"nvidia-gpus\">NVIDIA GPUs</h2>\n\n<blockquote class=\"wip\">\n  <p>Work In Progress</p>\n</blockquote>\n\n<h2 id=\"amd-gpus\">AMD GPUs</h2>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> docker docker-compose\n</code></pre></div></div>\n\n<p>Take for reference this docker compose file that was posted <a href=\"https://www.reddit.com/r/ollama/comments/1gec1nx/docker_compose_for_amd_users/\">on reddit</a></p>\n\n<div class=\"language-plaintext codeblock highlighter-rouge\" data-title=\"docker-compose.yml\"><div class=\"highlight\"><pre class=\"highlight\"><code>services:\n\n  ollama:\n    image: ollama/ollama:rocm\n    container_name: ollama\n    environment:\n      OLLAMA_MODELS: /usr/share/ollama\n      HSA_OVERRIDE_GFX_VERSION: \"X.Y.Z\"\n      HIP_VISIBLE_DEVICES: \"0\"\n    devices:\n      - \"/dev/kfd\"\n      - \"/dev/dri\"\n    security_opt:\n      - seccomp:unconfined\n    cap_add:\n      - SYS_PTRACE\n    ipc: host\n    group_add:\n      - video\n    volumes:\n      - /home/username/.ollama:/root/.ollama\n      - /home/username/ollama/models:/usr/share/ollama\n    ports:\n      - \"11434:11434\"\n    networks:\n      backend:\n        ipv4_address: 10.1.0.2\n\n  open-webui:\n    image: ghcr.io/open-webui/open-webui:cuda\n    container_name: open-webui\n    environment:\n      OLLAMA_BASE_URL: http://10.1.0.2:11434\n      HSA_OVERRIDE_GFX_VERSION: \"X.Y.Z\"\n      HIP_VISIBLE_DEVICES: \"0\"\n    devices:\n      - \"/dev/kfd\"\n      - \"/dev/dri\"\n    security_opt:\n      - seccomp:unconfined\n    cap_add:\n      - SYS_PTRACE\n    ipc: host\n    group_add:\n      - video\n    volumes:\n      - /home/username/.open-webui:/app/backend/data\n    ports:\n      - \"3000:8080\"\n    networks:\n      backend:\n        ipv4_address: 10.1.0.3\n\nnetworks:\n  backend:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 10.1.0.0/16\n          gateway: 10.1.0.1\n</code></pre></div></div>\n\n<p>Create in a project directory a <code class=\"language-plaintext highlighter-rouge\">docker-compose.yml</code>, and execute</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker compose up <span class=\"nt\">-d</span>\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p>Don’t forget to substitute in the docker compose file the correct <code class=\"language-plaintext highlighter-rouge\">username</code>. and <code class=\"language-plaintext highlighter-rouge\">X.Y.Z</code> for your GFX. See the <a href=\"ollama\">Ollama Guide</a> for more information.</p>\n</blockquote>\n\n<p>Then access <a href=\"http://localhost:3000\">http://localhost:3000</a> on your web browser. You should be able to see the the Open WebUI login screen.</p>\n\n<p>To stop the services</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker compose down\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p>There might be conflicts with the default port for <code class=\"language-plaintext highlighter-rouge\">ollama.service</code>, run</p>\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>lsof <span class=\"nt\">-i</span> :11434\n</code></pre></div>  </div>\n  <p>to verify. Either stop the ollama daemon, or change the docker compose file to another port.</p>\n</blockquote>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Jupyter Notebooks",
        "category" : "",
        "tags"     : "",
        "url"      : "/python.jupyter",
        "date"     : "",
        "content"  : "<h1 id=\"python-jupyter-notebooks\">Python: Jupyter Notebooks</h1>\n\n<p>Jupyter Notebooks are an interactive computing environment that allows users to write and execute code in a web-based interface. They support multiple programming languages (with Python being the most common) and combine code, text, equations, and visualizations in a single document. Jupyter is widely used in data science, scientific computing, and education for prototyping, data analysis, and sharing reproducible research.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Jupyter Notebooks are available via the <a href=\"https://pypi.org/\">Python Package Index</a>.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>notebook\n</code></pre></div></div>\n<p>You can also install the more modern Jupyter Lab, although this guide uses the Classic Notebook package.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>jupyterlab\n</code></pre></div></div>\n<p>To start a server on <code class=\"language-plaintext highlighter-rouge\">localhost:8000</code> simply run.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jupyter notebook\n</code></pre></div></div>\n\n<blockquote class=\"note\">\n  <p>The root directory / is mapped to wherever the jupyter notebook is started.</p>\n</blockquote>\n\n<h1 id=\"set-up-a-remote-server\">Set Up a Remote Server</h1>\n\n<p>Using a remote server in Jupyter is essential when working with resource-intensive tasks that require more computing power than a local machine can provide. This is common in data science, machine learning, and scientific computing, where large datasets and complex models demand high-performance CPUs, GPUs, or specialized hardware. Running Jupyter on a remote server allows users to access powerful resources while working from a lightweight local machine, ensuring efficiency and flexibility. Here is a simple, probably not so secure method to set up a quick jupyter server in your remote machine. Taken from <a href=\"https://lerner.co.il/2017/02/01/five-minute-guide-setting-jupyter-notebook-server/\">this article</a></p>\n\n<p>Generate a jupyter config file with</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jupyter notebook <span class=\"nt\">--generate-config</span>\n</code></pre></div></div>\n<p>Open the generated file <code class=\"language-plaintext highlighter-rouge\">jupyter_notebook_config.py</code>. This file is stored in the user’s home directory, i.e. these changes apply only to the current user and need to be set up for other users in case you need it. Here we will change a few configuration options.</p>\n\n<ul>\n  <li>Don’t start the web browser automatically.\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.open_browser <span class=\"o\">=</span> False\n</code></pre></div>    </div>\n  </li>\n  <li>Listen on the local network instead of the localhost only.\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.ip <span class=\"o\">=</span> <span class=\"s1\">'0.0.0.0'</span>\n</code></pre></div>    </div>\n  </li>\n  <li>Don’t require a password. (For some reason I never got this to work)\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.password <span class=\"o\">=</span> <span class=\"s1\">''</span>\n</code></pre></div>    </div>\n  </li>\n  <li>Set up a token (This will be the password)\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.token <span class=\"o\">=</span> <span class=\"s1\">'PASSWWORD'</span>\n</code></pre></div>    </div>\n  </li>\n  <li><strong>Optional</strong>: Change the default port. Useful when you have multiple users on the same PC.\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.port <span class=\"o\">=</span> 8888\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<blockquote class=\"tip\">\n  <p>In case you have multiple users/students, set up their configuration files with different ports and token passwords.</p>\n</blockquote>\n\n<h1 id=\"vim-bindings\">Vim Bindings</h1>\n\n<h2 id=\"jupyter-lab\">Jupyter Lab</h2>\n\n<p>Simply install the python package</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>jupyterlab-vim\n</code></pre></div></div>\n<p>and restart your notebook.</p>\n\n<h2 id=\"older-notebook-package\">Older notebook package</h2>\n<p>Basic Vim Bindings can be easily set up using the <a href=\"https://github.com/lambdalisue/jupyter-vim-binding\">jupyter-vim-binding</a> plugin. Following their documentation, run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Create required directory in case (optional)</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"si\">$(</span>jupyter <span class=\"nt\">--data-dir</span><span class=\"si\">)</span>/nbextensions\n<span class=\"c\"># Clone the repository</span>\n<span class=\"nb\">cd</span> <span class=\"si\">$(</span>jupyter <span class=\"nt\">--data-dir</span><span class=\"si\">)</span>/nbextensions\ngit clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding\n<span class=\"c\"># Activate the extension</span>\njupyter nbextension <span class=\"nb\">enable </span>vim_binding/vim_binding\n</code></pre></div></div>\n\n<h1 id=\"indent-guides\">Indent Guides</h1>\n\n<h2 id=\"jupyter-lab-1\">Jupyter Lab</h2>\n<p>Simply install the python package</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>jupyterlab-indent-guides\n</code></pre></div></div>\n<p>and restart your notebook.</p>\n\n<h1 id=\"advanced-settings\">Advanced settings</h1>\n\n<p>In your <em>*Jupyterlab</em> go the settings menu (Ctrl+,) and</p>\n<ol>\n  <li>look for “notebook” under the settings.</li>\n  <li>Click on “JSON Settings Editor” (that will open the json file).</li>\n  <li>Change options on the right panel of “User Preferences”.</li>\n  <li>Click on the save icon and refresh the website.</li>\n</ol>\n\n<h2 id=\"line-number\">Line number</h2>\n\n<p>Add the following setting</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">\"codeCellConfig\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"lineNumbers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2 id=\"matching-brackets\">Matching brackets</h2>\n\n<p>Add the following setting</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">\"codeCellConfig\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"matchBrackets\"</span><span class=\"p\">:</span><span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h1 id=\"language-server-protocol-lsp\">Language Server Protocol (LSP)</h1>\n\n<p>Inside your virtual environment, install the following package</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>jupyterlab-lsp\n</code></pre></div></div>\n<p>and then install your LSP of choice</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install</span> <span class=\"s1\">'python-lsp-server[all]'</span>\n</code></pre></div></div>\n<p>Restart your notebook and be happy.</p>\n\n<p>In case it helps</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">ln</span> <span class=\"nt\">-s</span> / .lsp_symlink\n</code></pre></div></div>\n<p>this symlinks root so that the LSP can find libraries and binaries outside the jupyter root. See the <a href=\"https://github.com/krassowski/jupyterlab-lsp\">Documentation</a> for more information.</p>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Python",
        "category" : "",
        "tags"     : "",
        "url"      : "/python",
        "date"     : "",
        "content"  : "<h1 id=\"python\">Python</h1>\n\n<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is widely used in web development, data science, automation, artificial intelligence, and scientific computing due to its extensive libraries and active community.</p>\n\n<p>This article is a basic guide on the common setups one has to deal with in Python.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p><strong>Linux/UNIX</strong></p>\n\n<p>Your system should already has a global Python version available. Run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 <span class=\"nt\">--version</span>\n</code></pre></div></div>\n<p>to verify the version. The global python version should update itself with the package manager.</p>\n\n<p>You can install other versions by compiling from source. Visit the <a href=\"https://www.python.org/downloads/source/\">Python Source Download Page</a> for more information. Make sure to install in your system the <a href=\"https://devguide.python.org/getting-started/setup-building/#build-dependencies\">necessary build dependencies</a>.</p>\n\n<p>On Arch Linux:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pacman <span class=\"nt\">-S</span> <span class=\"nt\">--needed</span> base-devel openssl zlib xz tk\n</code></pre></div></div>\n\n<p><strong>Windows</strong></p>\n\n<p>Go to the <a href=\"https://www.python.org/downloads/windows/\">Python Downloads Page</a> and get the executable for the version you are interested it. Open the executable and follow the installation wizard. Don’t forget to check the <em>Add Python to PATH</em>.</p>\n\n<h1 id=\"virtual-environments\">Virtual Environments</h1>\n\n<p>A virtual environment in Python is an isolated workspace that allows you to manage dependencies separately for different projects. It prevents conflicts between packages by creating a self-contained directory with its own Python interpreter and libraries. Python &gt;3.11 prevents users from installing packages globally via <code class=\"language-plaintext highlighter-rouge\">pip</code> and are encouraged to  to use virtual environments or user installs</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install</span> <span class=\"nt\">--user</span>\n</code></pre></div></div>\n\n<p>Let us create a virtual environment for general usage under the directory <code class=\"language-plaintext highlighter-rouge\">~/.virtualenvs/</code>. First install the system package <code class=\"language-plaintext highlighter-rouge\">python-virtualenv</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> python-virtualenv\n<span class=\"nb\">mkdir</span> ~/.virtualenvs/\n</code></pre></div></div>\n\n<p>As an example, let’s make a virtualenv called <code class=\"language-plaintext highlighter-rouge\">pyglobal</code> and activate it via the <code class=\"language-plaintext highlighter-rouge\">source</code> command.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>virtualenv ~/.virtualenvs/pyglobal\n<span class=\"nb\">source</span> ~/.virtualenvs/global/bin/activate\n</code></pre></div></div>\n\n<p>For easier access, add an alias to your <code class=\"language-plaintext highlighter-rouge\">~/.bashrc</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">alias </span><span class=\"nv\">pyglobal</span><span class=\"o\">=</span><span class=\"s2\">\"source ~/.virtualenvs/global/bin/activate\"</span>\n</code></pre></div></div>\n\n<p>To exit any virtual environment, at any time run the command <code class=\"language-plaintext highlighter-rouge\">deactivate</code>.</p>\n\n<h2 id=\"pythons-built-in-venv-module\">Python’s built-in <code class=\"language-plaintext highlighter-rouge\">venv</code> module</h2>\n\n<p>Python has its own tool for creating virtual environments. This is very helpful whenever you are accessing a server and don’t have access to <code class=\"language-plaintext highlighter-rouge\">virtualenv</code>, but you still have some access to some python binaries.</p>\n\n<p>For example, in one of the High Performance Computing (HPC) servers I have access, there are multiple python versions callable by e.g. <code class=\"language-plaintext highlighter-rouge\">python3.12</code> or <code class=\"language-plaintext highlighter-rouge\">python3.8</code>, but we don’t have access to <code class=\"language-plaintext highlighter-rouge\">virtualenv</code>. Thus I need to manage virtual environments either with <code class=\"language-plaintext highlighter-rouge\">conda</code> or <code class=\"language-plaintext highlighter-rouge\">venv</code>. To do this, call the the python binary you are interested in, followed by the module flag <code class=\"language-plaintext highlighter-rouge\">-m venv</code></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3.12 -m venv .venv\n</code></pre></div></div>\n\n<h1 id=\"managing-versions\">Managing Versions</h1>\n\n<p>Different projects may require different Python versions due to compatibility with specific libraries, dependencies, or system requirements. For example, an older project might rely on Python 3.7 because some of its dependencies have not been updated for newer versions, while a new project could require Python 3.11 to take advantage of performance improvements and new language features. Additionally, some systems or frameworks may only support certain Python versions, making it necessary to switch between them. Tools like <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> or <a href=\"https://docs.conda.io/projects/conda/en/stable/index.html\">conda</a> allow users to manage multiple Python versions efficiently, ensuring that each project runs in a controlled and compatible environment.</p>\n\n<blockquote class=\"tip\">\n  <p>For rolling-releases, it is better to use virtual environments that do not point to the global python version. When the global python is updated, your virtualenv might break.</p>\n</blockquote>\n\n<p>Pyenv is a tool, that among other things, it serves as an automation tool for compiling python versions from source and have them under the user’s home directory <code class=\"language-plaintext highlighter-rouge\">~/.pyenv/</code>. For installation follow their <a href=\"https://github.com/pyenv/pyenv\">documentation</a>.</p>\n\n<p>Once a python version is installed, we can let <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> point to those binaries. As an example, here we installed Python 3.12.0 and created a virtual environment called <code class=\"language-plaintext highlighter-rouge\">py3.12</code> under the <code class=\"language-plaintext highlighter-rouge\">~/.virtualenvs/</code> directory.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>virtualenv <span class=\"nt\">--python</span><span class=\"o\">=</span>/home/USER/.pyenv/versions/3.12.0/bin/python3.12 /home/USER/.virtualenv/py3.12\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p>It is really important to give the full path to the python binaries. Otherwise it can throw you a RuntimeError.</p>\n</blockquote>\n\n<h1 id=\"see-also\">See also</h1>\n\n<ul>\n  <li><a href=\"python.jupyter\">Jupyter Notebook</a></li>\n</ul>\n"
     
   } ,
  
   {
     
     
        "title"    : "Steam",
        "category" : "",
        "tags"     : "",
        "url"      : "/steam",
        "date"     : "",
        "content"  : "# Steam\n\nYou know what steam is already.\n\n## Installation\n\nFollow the [Arch Wiki Steam Page](https://wiki.archlinux.org/title/Steam).\n\n# Breaking Bugs\n\n- **Steam not opening correctly**\n\n  Steam is not opening correctly, it is instead openign _phantom windows_. Issue might be related to which GPU the desktop environment is deciding to use when loading the application. To solve the issue, edit the file `usr/share/applications/steam.desktop`\n\n  Look for the line that contains `PrefersNonDefaultGPU` and set it to false.\n\n  {: .codeblock data-title=\"usr/share/applications/steam.desktop\"}\n  ```sh\n  PrefersNonDefaultGPU=false\n  ```\n"
     
   } ,
  
   {
     
     
        "title"    : "Sushine/Moonlight",
        "category" : "",
        "tags"     : "",
        "url"      : "/sunshine",
        "date"     : "",
        "content"  : "# Sunshine\n\n[Sunshine](https://github.com/LizardByte/Sunshine) is a self-hosted game stream host for Moonlight. Offering low latency, cloud gaming server capabilities with support for AMD, Intel, and Nvidia GPUs for hardware encoding. Software encoding is also available. You can connect to Sunshine from any Moonlight client on a variety of devices. A web UI is provided to allow configuration, and client pairing, from your favorite web browser. Pair from the local server or any mobile device.\n\nTo access the desktop or an application of a remote PC (host), you need\n1. Setup `sunshine` on the host.\n2. Download `moonlight` on the client, and connect to the host.\n\n# Quick setup\n\n## Sunshine Setup (Host)\n\n{: .note}\n>This is a installation guide for Arch Linux systems. For other systems and more detailed instructions, read the [**Sunshine Documentation**](https://docs.lizardbyte.dev/projects/sunshine/latest/index.html)\n\n{: .tip}\n> For the initial setup, everything becomes easier if you have physical access to the host.\n\n### Installation\n\nOn Arch Linux, the developers explicitely state that they do not provide support for any AUR packages, but provide prebuilt binaries via their custom repository for pacman. Add the following to `/etc/pacman.conf`\n\n{: .codeblock data-title='/etc/pacman.conf'}\n```sh\n[lizardbyte]\nSigLevel = Optional\nServer = https://github.com/LizardByte/pacman-repo/releases/latest/download\n```\nThen update the repository, and install `sunshine`\n```sh\nsudo pacman -Sy\npacman -S sunshine\n```\n\n### Initial Setup\n\nAfter installation, some installation is required, enable\n\n```sh \nsudo setcap cap_sys_admin+p $(readlink -f $(which sunshine))\n```\nFor **X11 capture**, you may need to disable the capabilities set for KMS campture\n\n```sh \nsudo setcap -r $(readlink -f $(which sunshine))\n```\n\nAt this stage you should be able to open a server by running\n```sh \nsunshine\n```\nPreferably, start the daemon\n```sh\nsystemctl --user start sunshine\n```\nand optinally enable it on startup.\n```sh\n# OPTIONAL\nsystemctl --user enable sunshine\n```\n\nSunsine is configured via the Web UI, which is available on [https://localhost:47990](https://localhost:47990).\n\n{: .note}\n> You can ignore the browser's message of \"insecure website\".\n\nOn a first setup, you will be prompted to create a _local_ account for managing sunshine. Make sure to remember your username and password, since this is _self hosted_ once gone, they are gone forever.\n\n{: .tip}\n> At this stage, you can already share your host's desktop. For more information on how to add applications [read the docs](https://docs.lizardbyte.dev/projects/sunshine/latest/md_docs_2getting__started.html)\n\n## Moonlight (Client)\n\n{: .warning}\n>When first setting up a client, you will need access to the Web UI. It is simpler if you have physical acces to the host during this process.\n\n### Installation\n\nYou can install the `moonlight-qt` AUR package\n```sh \nyay -S moonlight-qt\n```\nor install their official flatpak\n```sh \nflatpak install flathub com.moonlight_stream.Moonlight\n```\nWhen launching the application, it will automatically look for sunshine servers on the local network, if your host is not on the local network and has an assigned IP address, you can add it manually by clicking the icon on the top-right corner. Here is a brief overview\n\n1. Select or add manually the host by providing the correct IP address.\n2. Moonlight will give you a PIN, take note of it.\n3. Go to your host's Web UI, and click the _PIN_ button located on the top bar.\n4. Provide the PIN the client gave you.\n\nOnce the client is paired, you should be able to access the host via the moonlight application.\n\n\n\n\n\n"
     
   } ,
  
   {
     
     
        "title"    : "ZeroTier",
        "category" : "",
        "tags"     : "",
        "url"      : "/zerotier",
        "date"     : "",
        "content"  : "# ZeroTier\n\nZeroTier is a software-defined networking (SDN) solution that enables secure and decentralized virtual networking. It allows devices to connect as if they were on the same local network, regardless of their physical location. ZeroTier combines the benefits of VPNs and SD-WANs, offering easy setup, high performance, and end-to-end encryption. It is widely used for remote access, IoT, gaming, and private networking without complex firewall or port forwarding configurations.\n\n## Installation\n\nTo install ZeroTier, first create an account on [their weibsite](https://www.zerotier.com/), then install the client.\n\n- **Windows/MacOC**\n\n  Download the correct file from their [Downloads Page](https://www.zerotier.com/download/)\n\n- **Linux**\n\n  For any distribution\n\n  ```bash\n  curl -s https://install.zerotier.com | sudo bash\n  ```\n\n  For **Arch Linux**, install the `zerotier-one` package.\n\n  ```bash\n  sudo pacman -S zerotier-one\n  ```\n\n  Then enable/start the daemon\n\n  ```bash\n  sudo systemctl start zerotier-one.service\n  sudo systemctl enable zerotier-one.service\n  ```\n\n  To verify your installation run\n\n  ```bash\n  sudo zerotier-cli status\n  ```\n\n## Usage (Linux Systems)\n\nTo Join a network, go to [ZeroTier Central](http://my.zerotier.com/) and create a network. Copy the id and run\n```bash\nsudo zerotier-cli join ################\n```\nverity you joined correctly with\n```bash\nsudo zerotier-cli listnetworks\n```\nthat you have joined correctly. \n\nNote that to communicate between PCs in the same network you do not use the physical IP of the machine, but the assigned ip by zerotier. To see this, go to the network settings and you will see the joined devices under *Members*. Make sure to give it a name/description to not forget which machine it is. Your IP of interest if under *Managed IPs*\n"
     
   } ,
  
   {
     
     
        "title"    : "Timeshift",
        "category" : "",
        "tags"     : "",
        "url"      : "/timeshift",
        "date"     : "",
        "content"  : "# Timeshift\n\nTimeshift is a backup and restore tool for Linux that creates system snapshots, allowing users to revert their system to a previous state in case of errors, updates gone wrong, or system corruption. It works similarly to Windows System Restore or macOS Time Machine but focuses on system files rather than personal data. Timeshift supports `rsync` (incremental backups with hard links) and `btrfs` snapshots (for filesystems with built-in snapshot support).\n\nA good practice is to make a system snapshot with `timeshift` before making a full system upgrade. Here I will provide a basic setup to accomplish this, but you can read the [Timeshift Arch Wiki Page](https://wiki.archlinux.org/title/Timeshift) for more information.\n\nInstall the package and enable a chosen cron scheduler (`cronie` for this case)\n```bash\nsudo pacman -S timeshift cronie\nsudo systemctl start cronie.service\nsudo systemctl enable cronie.service\n```\n\n{: .tip}\n> Open the Timeshift GUI from your applications menu and make an initial setup by clicking on _Wizard_\\\n> For ext4 filesystems:\n> 1. Choose `rsync`.\n> 2. Choose your disk.\n> 3. Select daily snapshots and keep from 2-3 of them.\n> 4. Click finish\n\nAlthough you can manipulate Timeshift with a GUI, the _Command Line Interface_ (CLI) helps with automation of snapshops. For example, you can make a bash script that makes a snapshot, and then a full system upgrade\n```bash\n#!/bin/bash\n\nsudo timeshift --create --comments \"update $(date +%y)w$(date +%U)\"\nsudo pacman -Syu\n```\n\nThis creates a snapshop with a comment _update ##w##_ that updates with the year and current week, e.g. _25w13_ is Week 13 of 2025.\n\nAfter the snapshot, it upgrades the system.\n\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Inkscape",
        "category" : "",
        "tags"     : "",
        "url"      : "/inkscape",
        "date"     : "",
        "content"  : "# Inkscape\n\nInkscape is a free and open-source vector graphics editor known for its powerful tools and user-friendly interface, making it ideal for creating illustrations, diagrams, logos, and complex designs. It uses the Scalable Vector Graphics (SVG) format as its native file type, ensuring resolution-independent output suitable for both print and web. Inkscape supports a wide range of features, including path editing, node manipulation, advanced text handling, layers, filters, and extensions. Compatible with Windows, macOS, and Linux, it is widely used by designers, illustrators, and hobbyists seeking a robust alternative to commercial vector design software.\n\n## Installation\n- On Arch Linux, simply\n```bash\nsudo pacman -S inkscape\n```\n- On Ubuntu-based systems,\n```bash\nsudo add-apt-repository ppa:inkscape.dev/stable\nsudo apt update\nsudo apt install inkscape\n```\n\n# Rendering LaTeX\n\nThere are many ways to render LaTeX text inside inkscape. An excellent option is the TexText plugin as it allows re-editing your renders and provides a preamble `.tex` file for full customization of your environment. \n\nTo install it (on Linux) \n1. Go to their [releases page](https://github.com/textext/textext/releases) on GitHub and download the corresponding tarball (`.tar.gz`). \n2. Change into the extracted directory\n3. Run `python3 setup.py`.\n4. Install the `python3-tinycss2` package from your package manager.\n\n{: .warning}\n> Make sure to have a LaTeX compiler installed (e.g. `texlive`). You can see the [Hakodocs' LaTeX page](latex) for more information.\n\n"
     
   } ,
  
   {
     
     
        "title"    : "LaTeX",
        "category" : "",
        "tags"     : "",
        "url"      : "/latex",
        "date"     : "",
        "content"  : "# LaTeX\n\nTo work with LaTeX, you need a compiler. In Linux we typically use `texlive`, for more information you can read the [TexLive Arch Wiki Page](https://wiki.archlinux.org/title/TeX_Live) and the [texlive package group](https://archlinux.org/groups/x86_64/texlive/).\n\nA basic setup is obtained by installing the whole group.\n```bash\nsudo pacman -S texlive\n```\n\nFrom this, your selected LaTeX editor should pick up the `latex` command in PATH.\n```bash\nlatex --version\n```\n\n# Neovim LaTeX support\n\nTo have LaTeX support in neovim, install the `vimtex` plugin using your preferred plugin manager.\n\n{: .tip}\n> Install `zathura` and `zathura-pdf-mupdf` to render your PDF and have additional features.\n\nAdditionally, you might want to setup an equivalent for the following:\n- An autocompletion engine (e.g. `nvim-cmp`) that connects with `vimtex`.\n- A snippet engine (e.g. `LuaSnip`).\n- A snippet library (e.g. `friendly-snippets`).\n\n# Spellcheck LSP (Neovim)\n\n{: .warning}\n> The spellcheck consumes **a lot** of RAM. You have been warned.\n\nTo have an LSP intended for LaTeX that checks spelling and grammar, in neovim you can install the `ltex-ls` LSP through your package manager. If you have `lspconfig` and `mason` installed, you can run\n```\n:MasonInstall ltex-ls\n```\nAdditionally, you will need a Java runtime\n```bash\nsudo pacman -S jdk21-openjdk\n```\n\n{: .warning}\n> Note that `ltex-ls` is **not** compatible with Java 24, hence I suggested `jdk21-openjdk` previously. If you already had a java runtime installed with Java 24, install Java 21 alongside it and run\n> ```bash\n> sudo archlinux-java set java-21-openjdk\n>```\n\nUse your LSP configuration and picker of choice to interact with the diagnostics and fixes.\n\n\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Docker",
        "category" : "",
        "tags"     : "",
        "url"      : "/linux.docker",
        "date"     : "",
        "content"  : "# Docker\n\n## Installation\n\nTo run docker, install the docker engine\n\n* **Arch-based systems**\n```bash\nsudo pacman -S docker docker-compose\n```\n\n* **Debian/Ubuntu**\n\n* **REHL/Fedora**\n\nand start/enable the daemon\n\n```bash\nsudo systemctl enable --now docker.service\n```\n\n# Basic Introduction to Docker\n\n# Cool applications\n\n## Windows Virtual Machine\n\nUnfortunately, you will need Windows at some point and we are sometimes lazy enough to spend 5 hours debugging a _not-decently_ made alternative instead of rebooting into a Windows partition.\n\nJust shove a Windows VM into a docker container and call it when you need it. Or just remove it completely when you get tired of it.\n\nHere is a [tutorial](https://github.com/winapps-org/winapps/blob/main/docs/docker.md) from WinApps on how to set it up using `docker` or `podman`.\n\n## WinApps\n\nWinApps is a way of running Windows applications on Linux. While `wine` uses a translation layer of instructions, `winapps` uses a VM in a docker container and streams specific applications to you DE via Remote Desktop, making it so that you can use a regular Win application as if it were native.\n\nSee the [WinApps repository](https://github.com/winapps-org/winapps) for more information.\n\nThe obvious downside is that you need enough resources to keep the VM active. The benefit is that you can run basically any Windows application this way.\n\n## Stirling PDF\n\nAlthough you can run a Stirling PDF server locally without issues. It has _way too many_ dependencies that you might not need in your system. For this case, it is simpler to just shove it in a Docker Container\n\n# Frequently Asked Questions\n\n## How do I run rootless docker?\n\n{: .warning}\n>Any action from this could cause unperceived vulnerabilities. Use at your own caution and risk.\n\nCreate the `docker` group\n\n```bash\nsudo groupadd docker\n```\n\nand add your current user (or any user) to the group\n```bash\nsudo gpasswd -a $USER docker\n```\n"
     
   } ,
  
   {
     
     
        "title"    : "redirect.html",
        "category" : "",
        "tags"     : "",
        "url"      : "/",
        "date"     : "",
        "content"  : ""
     
   } 
  
];

var sjs = SimpleJekyllSearch({
    searchInput: document.getElementById('search-input'),
    resultsContainer: document.getElementById('results-container'),
    json: jsondata,
    searchResultTemplate: '<li><a href="{url}" title="{desc}">{title}</a></li>',
    noResultsText: 'No results found',
    limit: 10,
    fuzzy: false,
    exclude: []
  })


