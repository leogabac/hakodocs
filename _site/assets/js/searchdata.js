
var jsondata=[
  
  ,
  
   {
     
     
        "title"    : "404.html",
        "category" : "",
        "tags"     : "",
        "url"      : "/404.html",
        "date"     : "",
        "content"  : "<!--- this file is needed for automatic creation of non existent pages --->\n"
     
   } ,
  
   {
     
     
        "title"    : "Arch Linux",
        "category" : "",
        "tags"     : "",
        "url"      : "/archlinux",
        "date"     : "",
        "content"  : "<h1 id=\"arch-linux\">Arch Linux</h1>\n\n<p>Arch Linux is a <em>rolling-release</em> distribution, i.e. <em>packages</em> (software) receive updates constantly. There is not a concensus on how often one needs to update their system, a good rule of thumb is once per week.</p>\n\n<blockquote class=\"tip\">\n  <p><strong>Tip:</strong> If case something happens, <strong>always</strong> check the <a href=\"https://wiki.archlinux.org/title/Main_page\">Arch Wiki</a> first. It always help, no matter the problem you may have. Read <strong>very</strong> carefully the instructions, and don’t skip steps. I have encountered many problems for literally not reading the next line in the wiki.</p>\n</blockquote>\n\n<p>This guide serves as both a beginner guide to know that to check after they install Arch Linux for the first time, but also a checklist for myself to remember what to look for in a new installation. I will assume that you installed KDE Plasma as your Desktop Environment.</p>\n\n<h2 id=\"the-package-manager\">The package Manager</h2>\n\n<p>As in any Linux distribution, Arch Linux has a <em>package manager</em> called <code class=\"language-plaintext highlighter-rouge\">pacman</code> that installs software from the <em>Arch repository</em> . Package names may differ from other distributions, so it is recommended that you check on the <a href=\"https://archlinux.org/packages/\">repositories</a> or the <a href=\"https://wiki.archlinux.org/title/Main_page\">Arch Wiki</a> how to install particular software.</p>\n\n<p>To install packages simply run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> PACKAGE_NAME\n</code></pre></div></div>\n\n<p>where the <code class=\"language-plaintext highlighter-rouge\">-S</code> flag stands for <em>Sync</em>. It basically reads</p>\n\n<blockquote>\n  <p>Sync from the pacman (Arch) repository PACKAGE_NAME with my system</p>\n</blockquote>\n\n<h2 id=\"the-arch-user-repository\">The Arch User Repository</h2>\n\n<p>Not every piece of software can be found in the regular Arch repositories. Take for example <code class=\"language-plaintext highlighter-rouge\">dropbox</code>, that has official support for Debian/Ubuntu, but not for Arch Linux. Another example would be software that need to be <em>compiled from source</em> like <code class=\"language-plaintext highlighter-rouge\">lammps</code>, <code class=\"language-plaintext highlighter-rouge\">gromacs</code> or some of the <code class=\"language-plaintext highlighter-rouge\">xp-pen</code> drivers for their tablets. Manually repackaging, or compiling from source will install the software on your system at the cost of not being properly managed by <code class=\"language-plaintext highlighter-rouge\">pacman</code>. On such cases we turn to the so-called <em>Arch User Repository</em> (AUR).</p>\n\n<p>The Arch User Repository (AUR) is a community-driven repository for Arch Linux that allows users to share and install packages not available in the official Arch repositories. Unlike the official repos, which provide precompiled binaries, the AUR contains <em>PKGBUILD</em> scripts—text files that define how to download, compile, and install software from source or external sources like .deb packages. Users can manually download a PKGBUILD and run <code class=\"language-plaintext highlighter-rouge\">makepkg -si</code> to build and install the package, or use an <em>AUR helper</em> like <code class=\"language-plaintext highlighter-rouge\">yay</code> or <code class=\"language-plaintext highlighter-rouge\">paru</code> to automate the process. Since AUR packages are maintained by the community, they are not officially supported by Arch and may require user intervention if dependencies or builds break.</p>\n\n<p>To install <code class=\"language-plaintext highlighter-rouge\">yay</code> as an AUR helper, run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> <span class=\"nt\">--needed</span> base-devel git\n<span class=\"nb\">mkdir</span> /tmp/yay\ngit clone https://aur.archlinux.org/yay.git /tmp/yay\n<span class=\"nb\">cd</span> /tmp/yay\nmakepkg <span class=\"nt\">-si</span>\n</code></pre></div></div>\n\n<p>Then from the AUR, we can install with same flags as in <code class=\"language-plaintext highlighter-rouge\">pacman</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> PACKAGE_NAME\n</code></pre></div></div>\n\n<p>When yay installs an AUR package, it first downloads the <em>PKGBUILD</em> script, builds the package into a <code class=\"language-plaintext highlighter-rouge\">.pkg.tar.zst</code> file, and then installs it using <code class=\"language-plaintext highlighter-rouge\">pacman -U</code>. Since pacman tracks all installed packages in its local database (/var/lib/pacman/), the AUR package becomes indistinguishable from an official package in terms of management. This means <code class=\"language-plaintext highlighter-rouge\">pacman -Q</code> can list it, <code class=\"language-plaintext highlighter-rouge\">pacman -R</code> can remove it, and <code class=\"language-plaintext highlighter-rouge\">pacman -U</code> can reinstall it.</p>\n\n<p>Because AUR packages are not in the official repositories, <code class=\"language-plaintext highlighter-rouge\">pacman -Syu</code> does not update them—users must manually rebuild them or use an AUR helper like <code class=\"language-plaintext highlighter-rouge\">yay -Syu</code>, which automates the update process by fetching new <em>PKGBUILD</em> versions and repeating the build-and-install process.</p>\n\n<h2 id=\"full-system-upgrade\">Full System Upgrade</h2>\n\n<p>Arch Linux receives constant updates, to make a <em>full system upgrade</em> run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-Syu</span>\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p><strong>Warning:</strong> Always make sure to read what packages are being updated.</p>\n</blockquote>\n\n<h1 id=\"system-sanity-check\">System Sanity Check</h1>\n\n<p>First thing, is that we need to check if all basic functionalities are working properly. In some sections I don’t have any particular advice, as they usually work out of the box. In such cases, I will simply provide a link to their ArchWiki page.</p>\n\n<h2 id=\"network\">Network</h2>\n\n<ul>\n  <li><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Network_configuration/Wireless\">Network configuration</a> on the ArchWiki.</li>\n</ul>\n\n<h2 id=\"sound\">Sound</h2>\n\n<ul>\n  <li>\n    <p><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Sound_system\">Sound system</a> on the ArchWiki.</p>\n  </li>\n  <li>\n    <p><strong>Microphone is not detected on some Lenovo Laptops</strong></p>\n\n    <p>On some Lenovo laptops, e.g. ThinkPad T14 Gen 2, the built-in microphone was not properly detected.</p>\n\n    <p>A solution was found in <a href=\"https://www.reddit.com/r/archlinux/comments/13hca34/microphone_is_not_detected/?share_id=ex0_FTMc98thXfpI1To3q&amp;utm_content=2&amp;utm_medium=android_app&amp;utm_name=androidcss&amp;utm_source=share&amp;utm_term=3\">this Reddit post</a> by user <code class=\"language-plaintext highlighter-rouge\">4bjmc881</code>, who identified that the issue was related to the audio driver being loaded by the system. By default, the system attempts to use the <code class=\"language-plaintext highlighter-rouge\">snd-hda-intel</code> driver. However, for newer devices (from 2019 onwards), the <code class=\"language-plaintext highlighter-rouge\">sof-audio-pci-intel-cnl</code> driver is more appropriate. To ensure that the correct driver is loaded, the <code class=\"language-plaintext highlighter-rouge\">snd-hda-intel</code> driver must be blacklisted.\\</p>\n\n    <p>To solve the issue, create or edit the modprobe config at <code class=\"language-plaintext highlighter-rouge\">/etc/modprobe.d/blacklist.conf</code> and add the following content</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>blacklist snd_hda_intel\n</code></pre></div>    </div>\n\n    <p>After reboot, the kernel loads the driver and the microphone is detected correctly.</p>\n  </li>\n</ul>\n\n<h2 id=\"bluetooth\">Bluetooth</h2>\n\n<ul>\n  <li>\n    <p><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Bluetooth_headset\">Bluetooth headset</a> on the ArchWiki.</p>\n  </li>\n  <li>\n    <p><strong>General bluetooth capabilities</strong></p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> bluez bluez-utils bluez-deprecated-tools\n</code></pre></div>    </div>\n\n    <p>Typically the Bluetooth Services is not enabled by default.</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl start bluetooth.service\n<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>bluetooth.service\n</code></pre></div>    </div>\n\n    <p>Sometimes you will need to reboot your PC for everything to work properly.</p>\n  </li>\n</ul>\n\n<h2 id=\"keyboard-backlight\">Keyboard Backlight</h2>\n\n<ul>\n  <li>\n    <p><strong>For general troubleshooting</strong> visit <a href=\"https://wiki.archlinux.org/title/Keyboard_backlight\">Keyboard backlight</a> on the Archwiki.</p>\n  </li>\n  <li>\n    <p><strong>The frontend that controls the backlight is not installed</strong></p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> brightnessctl\n</code></pre></div>    </div>\n\n    <p>If that does not solve it, check the Archwiki.</p>\n  </li>\n</ul>\n\n<h2 id=\"screenshots\">Screenshots</h2>\n\n<ul>\n  <li>\n    <p><strong>The software that takes screenshots is not installed</strong></p>\n\n    <p>For KDE Plasma use <code class=\"language-plaintext highlighter-rouge\">spectacle</code>.</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> spectacle\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"monitors\">Monitors</h2>\n\n<p>In particular, check that</p>\n\n<ol>\n  <li>All monitors connect correctly, in particular those that use Thunderbolt/USB4.</li>\n  <li>All monitors run at their respective refresh rate.</li>\n</ol>\n\n<h2 id=\"graphics-card\">Graphics Card</h2>\n\n<p>There are a few ways to make sure your dedicated graphics card is working.</p>\n\n<ul>\n  <li>\n    <p><strong>Card Is Detected</strong></p>\n\n    <ol>\n      <li>In KDE Plasma, look for the <em>About</em> setting, it should list all of your components.</li>\n      <li>Using fastfetch</li>\n    </ol>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> fastfetch\nfastfech\n</code></pre></div>    </div>\n\n    <ol>\n      <li>Using <code class=\"language-plaintext highlighter-rouge\">lspci</code></li>\n    </ol>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lspci | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> vga\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>OpenGL Renderer</strong></p>\n\n    <p>You can check the default OpenGL rendered for your system to make sure which card is currently being used</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>glxinfo | <span class=\"nb\">grep</span> <span class=\"s2\">\"OpenGL renderer\"</span>\n<span class=\"c\"># OpenGL renderer string: AMD Radeon RX 6650M (radeonsi, navi23, LLVM 19.1.6, DRM 3.59, 6.12.9-arch1-1)</span>\n</code></pre></div>    </div>\n\n    <p>This will list the current renderer and used driver. If it is not the correct one, you can force it with the <code class=\"language-plaintext highlighter-rouge\">DRI_PRIME</code> environment variable.</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">DRI_PRIME</span><span class=\"o\">=</span>1 glxinfo | <span class=\"nb\">grep</span> <span class=\"s2\">\"OpenGL renderer\"</span>\n<span class=\"c\"># OpenGL renderer string: AMD Radeon 780M (radeonsi, gfx1103_r1, LLVM 19.1.6, DRM 3.59, 6.12.9-arch1-1)</span>\n</code></pre></div>    </div>\n\n    <p>As a final sanity check, a good way to <em>really</em> make sure your card is working is by launching minecraft. You can install it from the AUR</p>\n\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> minecraft-launcher\n</code></pre></div>    </div>\n\n    <p>In a world, press F3 and check the <em>display</em> information on the right side. If you see the incorrect graphics card, change Plasma to use the other one as default, or force the application launcher to use the correct <code class=\"language-plaintext highlighter-rouge\">DRI_PRIME</code> variable state. I am not sure on how this is configured, typically after a few restards, Plasma always decides to use the dedicated graphics.</p>\n  </li>\n</ul>\n\n<h1 id=\"text-editor\">Text Editor</h1>\n\n<h2 id=\"vscode\">VSCode</h2>\n\n<p>There are many text editors on Linux. VSCode is a Microsoft editor with enabled telemetry, Linux users do not like that for privacy concerns. VSCodium is a community open-source release that nullifies telemetry, and is available in the AUR. For Arch Linux, there is an official OSS release</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> code\n</code></pre></div></div>\n\n<p>For more information, read the <a href=\"https://wiki.archlinux.org/title/Visual_Studio_Code\">VSCode Arch Wiki Page</a>.</p>\n\n<h2 id=\"neovim\">Neovim</h2>\n\n<p>I personally use <code class=\"language-plaintext highlighter-rouge\">nvim</code> with my own configuration.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> nvim\ngit clone https://github.com/leogabac/leovim.git ~/.config/nvim\nnvim\n</code></pre></div></div>\n\n<p>Check the <a href=\"https://github.com/leogabac/leovim\">leovim repository</a> for more information.</p>\n\n<h1 id=\"see-also\">See also</h1>\n\n<p>There are other tools you might be interested in checking out. Here are some of them (Available on this Wiki)</p>\n\n<ul>\n  <li><a href=\"python\">Python</a>: Installation, virtual environments, handling versions.</li>\n  <li><a href=\"timeshift\">Timeshift</a>: Tool for creating system snapshopts. Similar to MacOS TimeMachine.</li>\n  <li><a href=\"latex\">LaTeX</a>: Typesetting system.</li>\n</ul>\n"
     
   } ,
  
   {
     
     
        "title"    : "Home",
        "category" : "",
        "tags"     : "",
        "url"      : "/home",
        "date"     : "",
        "content"  : "<h1 id=\"welcome-to-hakodocs\">Welcome to HakoDocs!</h1>\n<p>HakoDocs is a public compilation of tech-related notes that address specific problems I’ve encountered throughout my life.\nYou can expect to find <em>How to do \\(X\\)</em> guides for a variety of topics, primarily related to Linux, programming languages, servers, and more.\nI started this project as a personal collection of notes, and as I began sharing them with my colleagues, it grew into something more.\nThe same colleagues these notes once helped started contributing to them. I hope you, like them, find something useful within this <em>hako</em>.</p>\n\n<blockquote class=\"note\">\n  <p><strong>Disclaimer:</strong> Many of the content in these notes is centered around Arch Linux as that is my daily driver.</p>\n</blockquote>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "index.html",
        "category" : "",
        "tags"     : "",
        "url"      : "/assets/blog/",
        "date"     : "",
        "content"  : "<!--- this file is needed for automatic creation of blog page --->"
     
   } ,
  
   {
     
     
        "title"    : "Julia",
        "category" : "",
        "tags"     : "",
        "url"      : "/julia",
        "date"     : "",
        "content"  : "<h1 id=\"julia\">Julia</h1>\n\n<p>Julia is a high-level, high-performance programming language designed for numerical computing and scientific applications. It combines the ease of use of languages like Python with the speed of compiled languages like C. Julia features just-in-time (JIT) compilation, making it highly efficient for mathematical operations, data analysis, and machine learning. It supports multiple dispatch, parallel computing, and seamless integration with Python, C, and Fortran.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>For specific installation instructions, see the <a href=\"https://julialang.org/downloads/\">Julia Downloads Page</a>. Generic installs can be done via</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-fsSL</span> https://install.julialang.org | sh\n</code></pre></div></div>\n<p>according to their <a href=\"https://docs.julialang.org/en/v1/manual/installation/\">manual</a>.</p>\n\n<p><strong>Arch Linux</strong></p>\n\n<p>According to the <a href=\"https://wiki.archlinux.org/title/Julia\">Julia Arch Wiki Page</a> we can install <code class=\"language-plaintext highlighter-rouge\">juliaup</code>, the Julia version manager, from the AUR</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> juliaup\n</code></pre></div></div>\n\n<p>After the installation, run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>julia\n</code></pre></div></div>\n<p>This will install the latest julia version available in <code class=\"language-plaintext highlighter-rouge\">juliaup</code>. It is not necessary to add to PATH.</p>\n\n<h1 id=\"breaking-bugs\">Breaking Bugs</h1>\n\n<p>Here is a list on workarounds for known bugs.</p>\n\n<ul>\n  <li><strong>Stack Shared Object</strong></li>\n</ul>\n\n<p>As of Feb 23 2025, there is a problem that throws the following error when installing from <code class=\"language-plaintext highlighter-rouge\">juliaup</code> from the AUR.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Installing Julia 1.11.3+0.x64.linux.gnu\nERROR: Unable to load dependent library /home/frieren/.julia/juliaup/julia-1.11.3+0.x64.linux.gnu/bin/../lib/julia/libopenlibm.so\nMessage:/home/frieren/.julia/juliaup/julia-1.11.3+0.x64.linux.gnu/bin/../lib/julia/libopenlibm.so: cannot enable executable stack as shared object requires: Invalid argument\n</code></pre></div></div>\n\n<p>This was first posted in the <a href=\"https://discourse.julialang.org/t/error-cannot-enable-executable-stack-when-starting-julia-solved/125655\">discourse</a> and then generated an <a href=\"https://github.com/JuliaLang/julia/issues/57250\">issue</a> on the Julia repo.</p>\n\n<p>To solve temporarily this problem, install</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yay <span class=\"nt\">-S</span> execstack\n</code></pre></div></div>\n<p>and run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>execstack <span class=\"nt\">-c</span> ~/.julia/juliaup/julia-1.11.3+0.x64.linux.gnu/lib/julia/libopenlibm.so\n</code></pre></div></div>\n\n<h1 id=\"see-also\">See also</h1>\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Jupyter Notebooks",
        "category" : "",
        "tags"     : "",
        "url"      : "/python.jupyter",
        "date"     : "",
        "content"  : "<h1 id=\"python-jupyter-notebooks\">Python: Jupyter Notebooks</h1>\n\n<p>Jupyter Notebooks are an interactive computing environment that allows users to write and execute code in a web-based interface. They support multiple programming languages (with Python being the most common) and combine code, text, equations, and visualizations in a single document. Jupyter is widely used in data science, scientific computing, and education for prototyping, data analysis, and sharing reproducible research.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Jupyter Notebooks are available via the <a href=\"https://pypi.org/\">Python Package Index</a>.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>notebook\n</code></pre></div></div>\n<p>You can also install the more modern Jupyter Lab, although this guide uses the Classic Notebook package.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>jupyterlab\n</code></pre></div></div>\n<p>To start a server on <code class=\"language-plaintext highlighter-rouge\">localhost:8000</code> simply run.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jupyter notebook\n</code></pre></div></div>\n\n<blockquote class=\"note\">\n  <p><strong>Note:</strong> The root directory / is mapped to wherever the jupyter notebook is started.</p>\n</blockquote>\n\n<h1 id=\"set-up-a-remote-server\">Set Up a Remote Server</h1>\n\n<p>Using a remote server in Jupyter is essential when working with resource-intensive tasks that require more computing power than a local machine can provide. This is common in data science, machine learning, and scientific computing, where large datasets and complex models demand high-performance CPUs, GPUs, or specialized hardware. Running Jupyter on a remote server allows users to access powerful resources while working from a lightweight local machine, ensuring efficiency and flexibility. Here is a simple, probably not so secure method to set up a quick jupyter server in your remote machine. Taken from <a href=\"https://lerner.co.il/2017/02/01/five-minute-guide-setting-jupyter-notebook-server/\">this article</a></p>\n\n<p>Generate a jupyter config file with</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jupyter notebook <span class=\"nt\">--generate-config</span>\n</code></pre></div></div>\n<p>Open the generated file <code class=\"language-plaintext highlighter-rouge\">jupyter_notebook_config.py</code>. This file is stored in the user’s home directory, i.e. these changes apply only to the current user and need to be set up for other users in case you need it. Here we will change a few configuration options.</p>\n\n<ul>\n  <li>Don’t start the web browser automatically.\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.open_browser <span class=\"o\">=</span> False\n</code></pre></div>    </div>\n  </li>\n  <li>Listen on the local network instead of the localhost only.\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.ip <span class=\"o\">=</span> <span class=\"s1\">'0.0.0.0'</span>\n</code></pre></div>    </div>\n  </li>\n  <li>Don’t require a password. (For some reason I never got this to work)\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.password <span class=\"o\">=</span> <span class=\"s1\">''</span>\n</code></pre></div>    </div>\n  </li>\n  <li>Set up a token (This will be the password)\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.token <span class=\"o\">=</span> <span class=\"s1\">'PASSWWORD'</span>\n</code></pre></div>    </div>\n  </li>\n  <li><strong>Optional</strong>: Change the default port. Useful when you have multiple users on the same PC.\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>c.NotebookApp.port <span class=\"o\">=</span> 8888\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<blockquote class=\"tip\">\n  <p><strong>TIP:</strong> In case you have multiple users/students, set up their configuration files with different ports and token passwords.</p>\n</blockquote>\n\n<h1 id=\"vim-bindings\">Vim Bindings</h1>\n\n<p>Basic Vim Bindings can be easily set up using the <a href=\"https://github.com/lambdalisue/jupyter-vim-binding\">jupyter-vim-binding</a> plugin. Following their documentation, run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Create required directory in case (optional)</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"si\">$(</span>jupyter <span class=\"nt\">--data-dir</span><span class=\"si\">)</span>/nbextensions\n<span class=\"c\"># Clone the repository</span>\n<span class=\"nb\">cd</span> <span class=\"si\">$(</span>jupyter <span class=\"nt\">--data-dir</span><span class=\"si\">)</span>/nbextensions\ngit clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding\n<span class=\"c\"># Activate the extension</span>\njupyter nbextension <span class=\"nb\">enable </span>vim_binding/vim_binding\n</code></pre></div></div>\n"
     
   } ,
  
   {
     
     
        "title"    : "Python",
        "category" : "",
        "tags"     : "",
        "url"      : "/python",
        "date"     : "",
        "content"  : "<h1 id=\"python\">Python</h1>\n\n<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is widely used in web development, data science, automation, artificial intelligence, and scientific computing due to its extensive libraries and active community.</p>\n\n<p>This article is a basic guide on the common setups one has to deal with in Python.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p><strong>Linux/UNIX</strong></p>\n\n<p>Your system should already has a global Python version available. Run</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 <span class=\"nt\">--version</span>\n</code></pre></div></div>\n<p>to verify the version. The global python version should update itself with the package manager.</p>\n\n<p>You can install other versions by compiling from source. Visit the <a href=\"https://www.python.org/downloads/source/\">Python Source Download Page</a> for more information. Make sure to install in your system the <a href=\"https://devguide.python.org/getting-started/setup-building/#build-dependencies\">necessary build dependencies</a>.</p>\n\n<p>On Arch Linux:</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pacman <span class=\"nt\">-S</span> <span class=\"nt\">--needed</span> base-devel openssl zlib xz tk\n</code></pre></div></div>\n\n<p><strong>Windows</strong></p>\n\n<p>Go to the <a href=\"https://www.python.org/downloads/windows/\">Python Downloads Page</a> and get the executable for the version you are interested it. Open the executable and follow the installation wizard. Don’t forget to check the <em>Add Python to PATH</em>.</p>\n\n<h1 id=\"virtual-environments\">Virtual Environments</h1>\n\n<p>A virtual environment in Python is an isolated workspace that allows you to manage dependencies separately for different projects. It prevents conflicts between packages by creating a self-contained directory with its own Python interpreter and libraries. Python &gt;3.11 prevents users from installing packages globally via <code class=\"language-plaintext highlighter-rouge\">pip</code> and are encouraged to  to use virtual environments or user installs</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install</span> <span class=\"nt\">--user</span>\n</code></pre></div></div>\n\n<p>Let us create a virtual environment for general usage under the directory <code class=\"language-plaintext highlighter-rouge\">~/.virtualenvs/</code>. First install the system package <code class=\"language-plaintext highlighter-rouge\">python-virtualenv</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>pacman <span class=\"nt\">-S</span> python-virtualenv\n<span class=\"nb\">mkdir</span> ~/.virtualenvs/\n</code></pre></div></div>\n\n<p>As an example, let’s make a virtualenv called <code class=\"language-plaintext highlighter-rouge\">pyglobal</code> and activate it via the <code class=\"language-plaintext highlighter-rouge\">source</code> command.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>virtualenv ~/.virtualenvs/pyglobal\n<span class=\"nb\">source</span> ~/.virtualenvs/global/bin/activate\n</code></pre></div></div>\n\n<p>For easier access, add an alias to your <code class=\"language-plaintext highlighter-rouge\">~/.bashrc</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">alias </span><span class=\"nv\">pyglobal</span><span class=\"o\">=</span><span class=\"s2\">\"source ~/.virtualenvs/global/bin/activate\"</span>\n</code></pre></div></div>\n\n<p>To exit any virtual environment, at any time run the command <code class=\"language-plaintext highlighter-rouge\">deactivate</code>.</p>\n\n<h1 id=\"managing-versions\">Managing Versions</h1>\n\n<p>Different projects may require different Python versions due to compatibility with specific libraries, dependencies, or system requirements. For example, an older project might rely on Python 3.7 because some of its dependencies have not been updated for newer versions, while a new project could require Python 3.11 to take advantage of performance improvements and new language features. Additionally, some systems or frameworks may only support certain Python versions, making it necessary to switch between them. Tools like <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> or <a href=\"https://docs.conda.io/projects/conda/en/stable/index.html\">conda</a> allow users to manage multiple Python versions efficiently, ensuring that each project runs in a controlled and compatible environment.</p>\n\n<blockquote class=\"tip\">\n  <p><strong>Tip:</strong> For rolling-releases, it is better to use virtual environments that do not point to the global python version. When the global python is updated, your virtualenv might break.</p>\n</blockquote>\n\n<p>Pyenv is a tool, that among other things, it serves as an automation tool for compiling python versions from source and have them under the user’s home directory <code class=\"language-plaintext highlighter-rouge\">~/.pyenv/</code>. For installation follow their <a href=\"https://github.com/pyenv/pyenv\">documentation</a>.</p>\n\n<p>Once a python version is installed, we can let <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> point to those binaries. As an example, here we installed Python 3.12.0 and created a virtual environment called <code class=\"language-plaintext highlighter-rouge\">py3.12</code> under the <code class=\"language-plaintext highlighter-rouge\">~/.virtualenvs/</code> directory.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>virtualenv <span class=\"nt\">--python</span><span class=\"o\">=</span>/home/USER/.pyenv/versions/3.12.0/bin/python3.12 /home/USER/.virtualenv/py3.12\n</code></pre></div></div>\n\n<blockquote class=\"warning\">\n  <p><strong>Warning:</strong> It is really important to give the full path to the python binaries. Otherwise it can throw you a RuntimeError.</p>\n</blockquote>\n\n<h1 id=\"see-also\">See also</h1>\n\n<ul>\n  <li><a href=\"python.jupyter\">Jupyter Notebook</a></li>\n</ul>\n"
     
   } ,
  
   {
     
     
        "title"    : "ZeroTier",
        "category" : "",
        "tags"     : "",
        "url"      : "/zerotier",
        "date"     : "",
        "content"  : "# ZeroTier\n\nZeroTier is a software-defined networking (SDN) solution that enables secure and decentralized virtual networking. It allows devices to connect as if they were on the same local network, regardless of their physical location. ZeroTier combines the benefits of VPNs and SD-WANs, offering easy setup, high performance, and end-to-end encryption. It is widely used for remote access, IoT, gaming, and private networking without complex firewall or port forwarding configurations.\n\n## Installation\n\nTo install ZeroTier, first create an account on [their weibsite](https://www.zerotier.com/), then install the client.\n\n- **Windows/MacOC**\n\n  Download the correct file from their [Downloads Page](https://www.zerotier.com/download/)\n\n- **Linux**\n\n  For any distribution\n\n  ```bash\n  curl -s https://install.zerotier.com | sudo bash\n  ```\n\n  For **Arch Linux**, install the `zerotier-one` package.\n\n  ```bash\n  sudo pacman -S zerotier-one\n  ```\n\n  Then enable/start the daemon\n\n  ```bash\n  sudo systemctl start zerotier-one.service\n  sudo systemctl enable zerotier-one.service\n  ```\n\n  To verify your installation run\n\n  ```bash\n  sudo zerotier-cli status\n  ```\n\n## Usage\n\n{: .note}\n> **Note:** Usage for Linux systems\n\nTo Join a network, go to [ZeroTier Central](http://my.zerotier.com/) and create a network. Copy the id and run\n```bash\nsudo zerotier-cli join ################\n```\nverity you joined correctly with\n```bash\nsudo zerotier-cli listnetworks\n```\nthat you have joined correctly. \n\nNote that to communicate between PCs in the same network you do not use the physical IP of the machine, but the assigned ip by zerotier. To see this, go to the network settings and you will see the joined devices under *Members*. Make sure to give it a name/description to not forget which machine it is. Your IP of interest if under *Managed IPs*\n"
     
   } ,
  
   {
     
     
        "title"    : "LaTeX",
        "category" : "",
        "tags"     : "",
        "url"      : "/latex",
        "date"     : "",
        "content"  : "# LaTeX\n\nTo work with LaTeX, you need a compiler. In Linux we typically use `texlive`, for more information you can read the [TexLive Arch Wiki Page](https://wiki.archlinux.org/title/TeX_Live) and the [texlive package group](https://archlinux.org/groups/x86_64/texlive/).\n\nA basic setup is obtained by installing the whole group.\n```bash\nsudo pacman -S texlive\n```\nFrom this, your selected LaTeX editor should pickup the `latex` command in PATH.\n\n\n"
     
   } ,
  
   {
     
     
        "title"    : "Timeshift",
        "category" : "",
        "tags"     : "",
        "url"      : "/timeshift",
        "date"     : "",
        "content"  : "# Timeshift\n\nTimeshift is a backup and restore tool for Linux that creates system snapshots, allowing users to revert their system to a previous state in case of errors, updates gone wrong, or system corruption. It works similarly to Windows System Restore or macOS Time Machine but focuses on system files rather than personal data. Timeshift supports `rsync` (incremental backups with hard links) and `btrfs` snapshots (for filesystems with built-in snapshot support).\n\nA good practice is to make a system snapshot with `timeshift` before making a full system upgrade. Here I will provide a basic setup to accomplish this, but you can read the [Timeshift Arch Wiki Page](https://wiki.archlinux.org/title/Timeshift) for more information.\n\nInstall the package and enable a chosen cron scheduler (`cronie` for this case)\n```bash\nsudo pacman -S timeshift cronie\nsudo systemctl start cronie.service\nsudo systemctl enable cronie.service\n```\n\n{: .tip}\n> __Tip:__   \n> Open the Timeshift GUI from your applications menu and make an initial setup by clicking on _Wizard_\\\n> For ext4 filesystems:\n> 1. Choose `rsync`.\n> 2. Choose your disk.\n> 3. Select daily snapshots and keep from 2-3 of them.\n> 4. Click finish\n\nAlthough you can manipulate Timeshift with a GUI, the _Command Line Interface_ (CLI) helps with automation of snapshops. For example, you can make a bash script that makes a snapshot, and then a full system upgrade\n```bash\n#!/bin/bash\n\nsudo timeshift --create --comments \"update $(date +%y)w$(date +%U)\"\nsudo pacman -Syu\n```\n\nThis creates a snapshop with a comment _update ##w##_ that updates with the year and current week, e.g. _25w13_ is Week 13 of 2025.\n\nAfter the snapshot, it upgrades the system.\n\n\n"
     
   } ,
  
   {
     
     
        "title"    : "redirect.html",
        "category" : "",
        "tags"     : "",
        "url"      : "/",
        "date"     : "",
        "content"  : ""
     
   } 
  
];

var sjs = SimpleJekyllSearch({
    searchInput: document.getElementById('search-input'),
    resultsContainer: document.getElementById('results-container'),
    json: jsondata,
    searchResultTemplate: '<li><a href="{url}" title="{desc}">{title}</a></li>',
    noResultsText: 'No results found',
    limit: 10,
    fuzzy: false,
    exclude: []
  })


